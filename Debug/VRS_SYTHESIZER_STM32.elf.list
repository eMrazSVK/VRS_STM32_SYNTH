
VRS_SYTHESIZER_STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001694  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000300  080017d0  080017d0  000117d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08001ad0  08001ad0  00011ad0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001ad4  08001ad4  00011ad4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000020  20000000  08001ad8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000028c  20000020  08001af8  00020020  2**2
                  ALLOC
  7 ._user_heap_stack 00000400  200002ac  08001af8  000202ac  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
  9 .debug_info   00007081  00000000  00000000  00020049  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001324  00000000  00000000  000270ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000890  00000000  00000000  000283f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000007b8  00000000  00000000  00028c80  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00002e5a  00000000  00000000  00029438  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00002745  00000000  00000000  0002c292  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007e  00000000  00000000  0002e9d7  2**0
                  CONTENTS, READONLY
 16 .debug_frame  000023d4  00000000  00000000  0002ea58  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .stabstr      0000003f  00000000  00000000  00030e2c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000020 	.word	0x20000020
 8000158:	00000000 	.word	0x00000000
 800015c:	080017b8 	.word	0x080017b8

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000024 	.word	0x20000024
 8000178:	080017b8 	.word	0x080017b8

0800017c <NVIC_PriorityGroupConfig>:
  *     @arg NVIC_PriorityGroup_4: 4 bits for preemption priority.
  *                                0 bits for subpriority.
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
 800017c:	b480      	push	{r7}
 800017e:	b083      	sub	sp, #12
 8000180:	af00      	add	r7, sp, #0
 8000182:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 8000184:	4a05      	ldr	r2, [pc, #20]	; (800019c <NVIC_PriorityGroupConfig+0x20>)
 8000186:	687b      	ldr	r3, [r7, #4]
 8000188:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800018c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000190:	60d3      	str	r3, [r2, #12]
}
 8000192:	bf00      	nop
 8000194:	370c      	adds	r7, #12
 8000196:	46bd      	mov	sp, r7
 8000198:	bc80      	pop	{r7}
 800019a:	4770      	bx	lr
 800019c:	e000ed00 	.word	0xe000ed00

080001a0 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 80001a0:	b480      	push	{r7}
 80001a2:	b085      	sub	sp, #20
 80001a4:	af00      	add	r7, sp, #0
 80001a6:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 80001a8:	2300      	movs	r3, #0
 80001aa:	73fb      	strb	r3, [r7, #15]
 80001ac:	2300      	movs	r3, #0
 80001ae:	73bb      	strb	r3, [r7, #14]
 80001b0:	230f      	movs	r3, #15
 80001b2:	737b      	strb	r3, [r7, #13]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 80001b4:	687b      	ldr	r3, [r7, #4]
 80001b6:	78db      	ldrb	r3, [r3, #3]
 80001b8:	2b00      	cmp	r3, #0
 80001ba:	d038      	beq.n	800022e <NVIC_Init+0x8e>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 80001bc:	4b26      	ldr	r3, [pc, #152]	; (8000258 <NVIC_Init+0xb8>)
 80001be:	68db      	ldr	r3, [r3, #12]
 80001c0:	43db      	mvns	r3, r3
 80001c2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80001c6:	0a1b      	lsrs	r3, r3, #8
 80001c8:	73fb      	strb	r3, [r7, #15]
    tmppre = (0x4 - tmppriority);
 80001ca:	7bfb      	ldrb	r3, [r7, #15]
 80001cc:	f1c3 0304 	rsb	r3, r3, #4
 80001d0:	73bb      	strb	r3, [r7, #14]
    tmpsub = tmpsub >> tmppriority;
 80001d2:	7b7a      	ldrb	r2, [r7, #13]
 80001d4:	7bfb      	ldrb	r3, [r7, #15]
 80001d6:	fa42 f303 	asr.w	r3, r2, r3
 80001da:	737b      	strb	r3, [r7, #13]

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 80001dc:	687b      	ldr	r3, [r7, #4]
 80001de:	785b      	ldrb	r3, [r3, #1]
 80001e0:	461a      	mov	r2, r3
 80001e2:	7bbb      	ldrb	r3, [r7, #14]
 80001e4:	fa02 f303 	lsl.w	r3, r2, r3
 80001e8:	73fb      	strb	r3, [r7, #15]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 80001ea:	687b      	ldr	r3, [r7, #4]
 80001ec:	789a      	ldrb	r2, [r3, #2]
 80001ee:	7b7b      	ldrb	r3, [r7, #13]
 80001f0:	4013      	ands	r3, r2
 80001f2:	b2da      	uxtb	r2, r3
 80001f4:	7bfb      	ldrb	r3, [r7, #15]
 80001f6:	4313      	orrs	r3, r2
 80001f8:	73fb      	strb	r3, [r7, #15]
    tmppriority = tmppriority << 0x04;
 80001fa:	7bfb      	ldrb	r3, [r7, #15]
 80001fc:	011b      	lsls	r3, r3, #4
 80001fe:	73fb      	strb	r3, [r7, #15]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8000200:	4a16      	ldr	r2, [pc, #88]	; (800025c <NVIC_Init+0xbc>)
 8000202:	687b      	ldr	r3, [r7, #4]
 8000204:	781b      	ldrb	r3, [r3, #0]
 8000206:	4413      	add	r3, r2
 8000208:	7bfa      	ldrb	r2, [r7, #15]
 800020a:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800020e:	4a13      	ldr	r2, [pc, #76]	; (800025c <NVIC_Init+0xbc>)
 8000210:	687b      	ldr	r3, [r7, #4]
 8000212:	781b      	ldrb	r3, [r3, #0]
 8000214:	095b      	lsrs	r3, r3, #5
 8000216:	b2db      	uxtb	r3, r3
 8000218:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 800021a:	687b      	ldr	r3, [r7, #4]
 800021c:	781b      	ldrb	r3, [r3, #0]
 800021e:	f003 031f 	and.w	r3, r3, #31
 8000222:	2101      	movs	r1, #1
 8000224:	fa01 f303 	lsl.w	r3, r1, r3
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000228:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 800022c:	e00f      	b.n	800024e <NVIC_Init+0xae>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800022e:	490b      	ldr	r1, [pc, #44]	; (800025c <NVIC_Init+0xbc>)
 8000230:	687b      	ldr	r3, [r7, #4]
 8000232:	781b      	ldrb	r3, [r3, #0]
 8000234:	095b      	lsrs	r3, r3, #5
 8000236:	b2db      	uxtb	r3, r3
 8000238:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 800023a:	687b      	ldr	r3, [r7, #4]
 800023c:	781b      	ldrb	r3, [r3, #0]
 800023e:	f003 031f 	and.w	r3, r3, #31
 8000242:	2201      	movs	r2, #1
 8000244:	409a      	lsls	r2, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000246:	f100 0320 	add.w	r3, r0, #32
 800024a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 800024e:	bf00      	nop
 8000250:	3714      	adds	r7, #20
 8000252:	46bd      	mov	sp, r7
 8000254:	bc80      	pop	{r7}
 8000256:	4770      	bx	lr
 8000258:	e000ed00 	.word	0xe000ed00
 800025c:	e000e100 	.word	0xe000e100

08000260 <DAC_Init>:
  * @param  DAC_InitStruct: pointer to a DAC_InitTypeDef structure that
  *         contains the configuration information for the specified DAC channel.
  * @retval None
  */
void DAC_Init(uint32_t DAC_Channel, DAC_InitTypeDef* DAC_InitStruct)
{
 8000260:	b480      	push	{r7}
 8000262:	b085      	sub	sp, #20
 8000264:	af00      	add	r7, sp, #0
 8000266:	6078      	str	r0, [r7, #4]
 8000268:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
 800026a:	2300      	movs	r3, #0
 800026c:	60fb      	str	r3, [r7, #12]
 800026e:	2300      	movs	r3, #0
 8000270:	60bb      	str	r3, [r7, #8]
  assert_param(IS_DAC_LFSR_UNMASK_TRIANGLE_AMPLITUDE(DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(DAC_InitStruct->DAC_OutputBuffer));

/*---------------------------- DAC CR Configuration --------------------------*/
  /* Get the DAC CR value */
  tmpreg1 = DAC->CR;
 8000272:	4b13      	ldr	r3, [pc, #76]	; (80002c0 <DAC_Init+0x60>)
 8000274:	681b      	ldr	r3, [r3, #0]
 8000276:	60fb      	str	r3, [r7, #12]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(CR_CLEAR_MASK << DAC_Channel);
 8000278:	f640 72fe 	movw	r2, #4094	; 0xffe
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	fa02 f303 	lsl.w	r3, r2, r3
 8000282:	43db      	mvns	r3, r3
 8000284:	68fa      	ldr	r2, [r7, #12]
 8000286:	4013      	ands	r3, r2
 8000288:	60fb      	str	r3, [r7, #12]
     mask/amplitude for wave generation */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set WAVEx bits according to DAC_WaveGeneration value */
  /* Set MAMPx bits according to DAC_LFSRUnmask_TriangleAmplitude value */ 
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (DAC_InitStruct->DAC_Trigger | DAC_InitStruct->DAC_WaveGeneration |
 800028a:	683b      	ldr	r3, [r7, #0]
 800028c:	681a      	ldr	r2, [r3, #0]
 800028e:	683b      	ldr	r3, [r7, #0]
 8000290:	685b      	ldr	r3, [r3, #4]
 8000292:	431a      	orrs	r2, r3
             DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude | DAC_InitStruct->DAC_OutputBuffer);
 8000294:	683b      	ldr	r3, [r7, #0]
 8000296:	689b      	ldr	r3, [r3, #8]
     mask/amplitude for wave generation */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set WAVEx bits according to DAC_WaveGeneration value */
  /* Set MAMPx bits according to DAC_LFSRUnmask_TriangleAmplitude value */ 
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (DAC_InitStruct->DAC_Trigger | DAC_InitStruct->DAC_WaveGeneration |
 8000298:	431a      	orrs	r2, r3
             DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude | DAC_InitStruct->DAC_OutputBuffer);
 800029a:	683b      	ldr	r3, [r7, #0]
 800029c:	68db      	ldr	r3, [r3, #12]
     mask/amplitude for wave generation */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set WAVEx bits according to DAC_WaveGeneration value */
  /* Set MAMPx bits according to DAC_LFSRUnmask_TriangleAmplitude value */ 
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (DAC_InitStruct->DAC_Trigger | DAC_InitStruct->DAC_WaveGeneration |
 800029e:	4313      	orrs	r3, r2
 80002a0:	60bb      	str	r3, [r7, #8]
             DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude | DAC_InitStruct->DAC_OutputBuffer);
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << DAC_Channel;
 80002a2:	68ba      	ldr	r2, [r7, #8]
 80002a4:	687b      	ldr	r3, [r7, #4]
 80002a6:	fa02 f303 	lsl.w	r3, r2, r3
 80002aa:	68fa      	ldr	r2, [r7, #12]
 80002ac:	4313      	orrs	r3, r2
 80002ae:	60fb      	str	r3, [r7, #12]
  /* Write to DAC CR */
  DAC->CR = tmpreg1;
 80002b0:	4a03      	ldr	r2, [pc, #12]	; (80002c0 <DAC_Init+0x60>)
 80002b2:	68fb      	ldr	r3, [r7, #12]
 80002b4:	6013      	str	r3, [r2, #0]
}
 80002b6:	bf00      	nop
 80002b8:	3714      	adds	r7, #20
 80002ba:	46bd      	mov	sp, r7
 80002bc:	bc80      	pop	{r7}
 80002be:	4770      	bx	lr
 80002c0:	40007400 	.word	0x40007400

080002c4 <DAC_Cmd>:
  * @note When the DAC channel is enabled the trigger source can no more
  *       be modified.
  * @retval None
  */
void DAC_Cmd(uint32_t DAC_Channel, FunctionalState NewState)
{
 80002c4:	b480      	push	{r7}
 80002c6:	b083      	sub	sp, #12
 80002c8:	af00      	add	r7, sp, #0
 80002ca:	6078      	str	r0, [r7, #4]
 80002cc:	460b      	mov	r3, r1
 80002ce:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80002d0:	78fb      	ldrb	r3, [r7, #3]
 80002d2:	2b00      	cmp	r3, #0
 80002d4:	d009      	beq.n	80002ea <DAC_Cmd+0x26>
  {
    /* Enable the selected DAC channel */
    DAC->CR |= (DAC_CR_EN1 << DAC_Channel);
 80002d6:	490c      	ldr	r1, [pc, #48]	; (8000308 <DAC_Cmd+0x44>)
 80002d8:	4b0b      	ldr	r3, [pc, #44]	; (8000308 <DAC_Cmd+0x44>)
 80002da:	681a      	ldr	r2, [r3, #0]
 80002dc:	2001      	movs	r0, #1
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	fa00 f303 	lsl.w	r3, r0, r3
 80002e4:	4313      	orrs	r3, r2
 80002e6:	600b      	str	r3, [r1, #0]
  else
  {
    /* Disable the selected DAC channel */
    DAC->CR &= (~(DAC_CR_EN1 << DAC_Channel));
  }
}
 80002e8:	e009      	b.n	80002fe <DAC_Cmd+0x3a>
    DAC->CR |= (DAC_CR_EN1 << DAC_Channel);
  }
  else
  {
    /* Disable the selected DAC channel */
    DAC->CR &= (~(DAC_CR_EN1 << DAC_Channel));
 80002ea:	4907      	ldr	r1, [pc, #28]	; (8000308 <DAC_Cmd+0x44>)
 80002ec:	4b06      	ldr	r3, [pc, #24]	; (8000308 <DAC_Cmd+0x44>)
 80002ee:	681a      	ldr	r2, [r3, #0]
 80002f0:	2001      	movs	r0, #1
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	fa00 f303 	lsl.w	r3, r0, r3
 80002f8:	43db      	mvns	r3, r3
 80002fa:	4013      	ands	r3, r2
 80002fc:	600b      	str	r3, [r1, #0]
  }
}
 80002fe:	bf00      	nop
 8000300:	370c      	adds	r7, #12
 8000302:	46bd      	mov	sp, r7
 8000304:	bc80      	pop	{r7}
 8000306:	4770      	bx	lr
 8000308:	40007400 	.word	0x40007400

0800030c <DAC_DMACmd>:
  * @note The DAC channel1 (channel2) is mapped on DMA1 channel3 (channel4) which 
  *  must be already configured. 
  * @retval None
  */
void DAC_DMACmd(uint32_t DAC_Channel, FunctionalState NewState)
{
 800030c:	b480      	push	{r7}
 800030e:	b083      	sub	sp, #12
 8000310:	af00      	add	r7, sp, #0
 8000312:	6078      	str	r0, [r7, #4]
 8000314:	460b      	mov	r3, r1
 8000316:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000318:	78fb      	ldrb	r3, [r7, #3]
 800031a:	2b00      	cmp	r3, #0
 800031c:	d00a      	beq.n	8000334 <DAC_DMACmd+0x28>
  {
    /* Enable the selected DAC channel DMA request */
    DAC->CR |= (DAC_CR_DMAEN1 << DAC_Channel);
 800031e:	490d      	ldr	r1, [pc, #52]	; (8000354 <DAC_DMACmd+0x48>)
 8000320:	4b0c      	ldr	r3, [pc, #48]	; (8000354 <DAC_DMACmd+0x48>)
 8000322:	681a      	ldr	r2, [r3, #0]
 8000324:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	fa00 f303 	lsl.w	r3, r0, r3
 800032e:	4313      	orrs	r3, r2
 8000330:	600b      	str	r3, [r1, #0]
  else
  {
    /* Disable the selected DAC channel DMA request */
    DAC->CR &= (~(DAC_CR_DMAEN1 << DAC_Channel));
  }
}
 8000332:	e00a      	b.n	800034a <DAC_DMACmd+0x3e>
    DAC->CR |= (DAC_CR_DMAEN1 << DAC_Channel);
  }
  else
  {
    /* Disable the selected DAC channel DMA request */
    DAC->CR &= (~(DAC_CR_DMAEN1 << DAC_Channel));
 8000334:	4907      	ldr	r1, [pc, #28]	; (8000354 <DAC_DMACmd+0x48>)
 8000336:	4b07      	ldr	r3, [pc, #28]	; (8000354 <DAC_DMACmd+0x48>)
 8000338:	681a      	ldr	r2, [r3, #0]
 800033a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800033e:	687b      	ldr	r3, [r7, #4]
 8000340:	fa00 f303 	lsl.w	r3, r0, r3
 8000344:	43db      	mvns	r3, r3
 8000346:	4013      	ands	r3, r2
 8000348:	600b      	str	r3, [r1, #0]
  }
}
 800034a:	bf00      	nop
 800034c:	370c      	adds	r7, #12
 800034e:	46bd      	mov	sp, r7
 8000350:	bc80      	pop	{r7}
 8000352:	4770      	bx	lr
 8000354:	40007400 	.word	0x40007400

08000358 <DMA_DeInit>:
  * @param  DMAy_Channelx: where y can be 1 or 2 to select the DMA and x can be 
  *         1 to 7 for DMA1 and 1 to 5 for DMA2 to select the DMA Channel.
  * @retval None
  */
void DMA_DeInit(DMA_Channel_TypeDef* DMAy_Channelx)
{
 8000358:	b480      	push	{r7}
 800035a:	b083      	sub	sp, #12
 800035c:	af00      	add	r7, sp, #0
 800035e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));

  /* Disable the selected DMAy Channelx */
  DMAy_Channelx->CCR &= (uint16_t)(~DMA_CCR1_EN);
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	681a      	ldr	r2, [r3, #0]
 8000364:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8000368:	4013      	ands	r3, r2
 800036a:	687a      	ldr	r2, [r7, #4]
 800036c:	6013      	str	r3, [r2, #0]

  /* Reset DMAy Channelx control register */
  DMAy_Channelx->CCR  = 0;
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	2200      	movs	r2, #0
 8000372:	601a      	str	r2, [r3, #0]
  
  /* Reset DMAy Channelx remaining bytes register */
  DMAy_Channelx->CNDTR = 0;
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	2200      	movs	r2, #0
 8000378:	605a      	str	r2, [r3, #4]
  
  /* Reset DMAy Channelx peripheral address register */
  DMAy_Channelx->CPAR  = 0;
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	2200      	movs	r2, #0
 800037e:	609a      	str	r2, [r3, #8]
  
  /* Reset DMAy Channelx memory address register */
  DMAy_Channelx->CMAR = 0;
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	2200      	movs	r2, #0
 8000384:	60da      	str	r2, [r3, #12]
  
  if (DMAy_Channelx == DMA1_Channel1)
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	4a43      	ldr	r2, [pc, #268]	; (8000498 <DMA_DeInit+0x140>)
 800038a:	4293      	cmp	r3, r2
 800038c:	d106      	bne.n	800039c <DMA_DeInit+0x44>
  {
    /* Reset interrupt pending bits for DMA1 Channel1 */
    DMA1->IFCR |= DMA1_CHANNEL1_IT_MASK;
 800038e:	4a43      	ldr	r2, [pc, #268]	; (800049c <DMA_DeInit+0x144>)
 8000390:	4b42      	ldr	r3, [pc, #264]	; (800049c <DMA_DeInit+0x144>)
 8000392:	685b      	ldr	r3, [r3, #4]
 8000394:	f043 030f 	orr.w	r3, r3, #15
 8000398:	6053      	str	r3, [r2, #4]
    {
      /* Reset interrupt pending bits for DMA2 Channel5 */
      DMA2->IFCR |= DMA2_CHANNEL5_IT_MASK;
    }
  }
}
 800039a:	e077      	b.n	800048c <DMA_DeInit+0x134>
  if (DMAy_Channelx == DMA1_Channel1)
  {
    /* Reset interrupt pending bits for DMA1 Channel1 */
    DMA1->IFCR |= DMA1_CHANNEL1_IT_MASK;
  }
  else if (DMAy_Channelx == DMA1_Channel2)
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	4a40      	ldr	r2, [pc, #256]	; (80004a0 <DMA_DeInit+0x148>)
 80003a0:	4293      	cmp	r3, r2
 80003a2:	d106      	bne.n	80003b2 <DMA_DeInit+0x5a>
  {
    /* Reset interrupt pending bits for DMA1 Channel2 */
    DMA1->IFCR |= DMA1_CHANNEL2_IT_MASK;
 80003a4:	4a3d      	ldr	r2, [pc, #244]	; (800049c <DMA_DeInit+0x144>)
 80003a6:	4b3d      	ldr	r3, [pc, #244]	; (800049c <DMA_DeInit+0x144>)
 80003a8:	685b      	ldr	r3, [r3, #4]
 80003aa:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 80003ae:	6053      	str	r3, [r2, #4]
    {
      /* Reset interrupt pending bits for DMA2 Channel5 */
      DMA2->IFCR |= DMA2_CHANNEL5_IT_MASK;
    }
  }
}
 80003b0:	e06c      	b.n	800048c <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA1_Channel2)
  {
    /* Reset interrupt pending bits for DMA1 Channel2 */
    DMA1->IFCR |= DMA1_CHANNEL2_IT_MASK;
  }
  else if (DMAy_Channelx == DMA1_Channel3)
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	4a3b      	ldr	r2, [pc, #236]	; (80004a4 <DMA_DeInit+0x14c>)
 80003b6:	4293      	cmp	r3, r2
 80003b8:	d106      	bne.n	80003c8 <DMA_DeInit+0x70>
  {
    /* Reset interrupt pending bits for DMA1 Channel3 */
    DMA1->IFCR |= DMA1_CHANNEL3_IT_MASK;
 80003ba:	4a38      	ldr	r2, [pc, #224]	; (800049c <DMA_DeInit+0x144>)
 80003bc:	4b37      	ldr	r3, [pc, #220]	; (800049c <DMA_DeInit+0x144>)
 80003be:	685b      	ldr	r3, [r3, #4]
 80003c0:	f443 6370 	orr.w	r3, r3, #3840	; 0xf00
 80003c4:	6053      	str	r3, [r2, #4]
    {
      /* Reset interrupt pending bits for DMA2 Channel5 */
      DMA2->IFCR |= DMA2_CHANNEL5_IT_MASK;
    }
  }
}
 80003c6:	e061      	b.n	800048c <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA1_Channel3)
  {
    /* Reset interrupt pending bits for DMA1 Channel3 */
    DMA1->IFCR |= DMA1_CHANNEL3_IT_MASK;
  }
  else if (DMAy_Channelx == DMA1_Channel4)
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	4a37      	ldr	r2, [pc, #220]	; (80004a8 <DMA_DeInit+0x150>)
 80003cc:	4293      	cmp	r3, r2
 80003ce:	d106      	bne.n	80003de <DMA_DeInit+0x86>
  {
    /* Reset interrupt pending bits for DMA1 Channel4 */
    DMA1->IFCR |= DMA1_CHANNEL4_IT_MASK;
 80003d0:	4a32      	ldr	r2, [pc, #200]	; (800049c <DMA_DeInit+0x144>)
 80003d2:	4b32      	ldr	r3, [pc, #200]	; (800049c <DMA_DeInit+0x144>)
 80003d4:	685b      	ldr	r3, [r3, #4]
 80003d6:	f443 4370 	orr.w	r3, r3, #61440	; 0xf000
 80003da:	6053      	str	r3, [r2, #4]
    {
      /* Reset interrupt pending bits for DMA2 Channel5 */
      DMA2->IFCR |= DMA2_CHANNEL5_IT_MASK;
    }
  }
}
 80003dc:	e056      	b.n	800048c <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA1_Channel4)
  {
    /* Reset interrupt pending bits for DMA1 Channel4 */
    DMA1->IFCR |= DMA1_CHANNEL4_IT_MASK;
  }
  else if (DMAy_Channelx == DMA1_Channel5)
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	4a32      	ldr	r2, [pc, #200]	; (80004ac <DMA_DeInit+0x154>)
 80003e2:	4293      	cmp	r3, r2
 80003e4:	d106      	bne.n	80003f4 <DMA_DeInit+0x9c>
  {
    /* Reset interrupt pending bits for DMA1 Channel5 */
    DMA1->IFCR |= DMA1_CHANNEL5_IT_MASK;
 80003e6:	4a2d      	ldr	r2, [pc, #180]	; (800049c <DMA_DeInit+0x144>)
 80003e8:	4b2c      	ldr	r3, [pc, #176]	; (800049c <DMA_DeInit+0x144>)
 80003ea:	685b      	ldr	r3, [r3, #4]
 80003ec:	f443 2370 	orr.w	r3, r3, #983040	; 0xf0000
 80003f0:	6053      	str	r3, [r2, #4]
    {
      /* Reset interrupt pending bits for DMA2 Channel5 */
      DMA2->IFCR |= DMA2_CHANNEL5_IT_MASK;
    }
  }
}
 80003f2:	e04b      	b.n	800048c <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA1_Channel5)
  {
    /* Reset interrupt pending bits for DMA1 Channel5 */
    DMA1->IFCR |= DMA1_CHANNEL5_IT_MASK;
  }
  else if (DMAy_Channelx == DMA1_Channel6)
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	4a2e      	ldr	r2, [pc, #184]	; (80004b0 <DMA_DeInit+0x158>)
 80003f8:	4293      	cmp	r3, r2
 80003fa:	d106      	bne.n	800040a <DMA_DeInit+0xb2>
  {
    /* Reset interrupt pending bits for DMA1 Channel6 */
    DMA1->IFCR |= DMA1_CHANNEL6_IT_MASK;
 80003fc:	4a27      	ldr	r2, [pc, #156]	; (800049c <DMA_DeInit+0x144>)
 80003fe:	4b27      	ldr	r3, [pc, #156]	; (800049c <DMA_DeInit+0x144>)
 8000400:	685b      	ldr	r3, [r3, #4]
 8000402:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000406:	6053      	str	r3, [r2, #4]
    {
      /* Reset interrupt pending bits for DMA2 Channel5 */
      DMA2->IFCR |= DMA2_CHANNEL5_IT_MASK;
    }
  }
}
 8000408:	e040      	b.n	800048c <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA1_Channel6)
  {
    /* Reset interrupt pending bits for DMA1 Channel6 */
    DMA1->IFCR |= DMA1_CHANNEL6_IT_MASK;
  }
  else if (DMAy_Channelx == DMA1_Channel7)
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	4a29      	ldr	r2, [pc, #164]	; (80004b4 <DMA_DeInit+0x15c>)
 800040e:	4293      	cmp	r3, r2
 8000410:	d106      	bne.n	8000420 <DMA_DeInit+0xc8>
  {
    /* Reset interrupt pending bits for DMA1 Channel7 */
    DMA1->IFCR |= DMA1_CHANNEL7_IT_MASK;
 8000412:	4a22      	ldr	r2, [pc, #136]	; (800049c <DMA_DeInit+0x144>)
 8000414:	4b21      	ldr	r3, [pc, #132]	; (800049c <DMA_DeInit+0x144>)
 8000416:	685b      	ldr	r3, [r3, #4]
 8000418:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
 800041c:	6053      	str	r3, [r2, #4]
    {
      /* Reset interrupt pending bits for DMA2 Channel5 */
      DMA2->IFCR |= DMA2_CHANNEL5_IT_MASK;
    }
  }
}
 800041e:	e035      	b.n	800048c <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA1_Channel7)
  {
    /* Reset interrupt pending bits for DMA1 Channel7 */
    DMA1->IFCR |= DMA1_CHANNEL7_IT_MASK;
  }
  else if (DMAy_Channelx == DMA2_Channel1)
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	4a25      	ldr	r2, [pc, #148]	; (80004b8 <DMA_DeInit+0x160>)
 8000424:	4293      	cmp	r3, r2
 8000426:	d106      	bne.n	8000436 <DMA_DeInit+0xde>
  {
    /* Reset interrupt pending bits for DMA2 Channel1 */
    DMA2->IFCR |= DMA2_CHANNEL1_IT_MASK;
 8000428:	4a24      	ldr	r2, [pc, #144]	; (80004bc <DMA_DeInit+0x164>)
 800042a:	4b24      	ldr	r3, [pc, #144]	; (80004bc <DMA_DeInit+0x164>)
 800042c:	685b      	ldr	r3, [r3, #4]
 800042e:	f043 030f 	orr.w	r3, r3, #15
 8000432:	6053      	str	r3, [r2, #4]
    {
      /* Reset interrupt pending bits for DMA2 Channel5 */
      DMA2->IFCR |= DMA2_CHANNEL5_IT_MASK;
    }
  }
}
 8000434:	e02a      	b.n	800048c <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA2_Channel1)
  {
    /* Reset interrupt pending bits for DMA2 Channel1 */
    DMA2->IFCR |= DMA2_CHANNEL1_IT_MASK;
  }
  else if (DMAy_Channelx == DMA2_Channel2)
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	4a21      	ldr	r2, [pc, #132]	; (80004c0 <DMA_DeInit+0x168>)
 800043a:	4293      	cmp	r3, r2
 800043c:	d106      	bne.n	800044c <DMA_DeInit+0xf4>
  {
    /* Reset interrupt pending bits for DMA2 Channel2 */
    DMA2->IFCR |= DMA2_CHANNEL2_IT_MASK;
 800043e:	4a1f      	ldr	r2, [pc, #124]	; (80004bc <DMA_DeInit+0x164>)
 8000440:	4b1e      	ldr	r3, [pc, #120]	; (80004bc <DMA_DeInit+0x164>)
 8000442:	685b      	ldr	r3, [r3, #4]
 8000444:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8000448:	6053      	str	r3, [r2, #4]
    {
      /* Reset interrupt pending bits for DMA2 Channel5 */
      DMA2->IFCR |= DMA2_CHANNEL5_IT_MASK;
    }
  }
}
 800044a:	e01f      	b.n	800048c <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA2_Channel2)
  {
    /* Reset interrupt pending bits for DMA2 Channel2 */
    DMA2->IFCR |= DMA2_CHANNEL2_IT_MASK;
  }
  else if (DMAy_Channelx == DMA2_Channel3)
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	4a1d      	ldr	r2, [pc, #116]	; (80004c4 <DMA_DeInit+0x16c>)
 8000450:	4293      	cmp	r3, r2
 8000452:	d106      	bne.n	8000462 <DMA_DeInit+0x10a>
  {
    /* Reset interrupt pending bits for DMA2 Channel3 */
    DMA2->IFCR |= DMA2_CHANNEL3_IT_MASK;
 8000454:	4a19      	ldr	r2, [pc, #100]	; (80004bc <DMA_DeInit+0x164>)
 8000456:	4b19      	ldr	r3, [pc, #100]	; (80004bc <DMA_DeInit+0x164>)
 8000458:	685b      	ldr	r3, [r3, #4]
 800045a:	f443 6370 	orr.w	r3, r3, #3840	; 0xf00
 800045e:	6053      	str	r3, [r2, #4]
    {
      /* Reset interrupt pending bits for DMA2 Channel5 */
      DMA2->IFCR |= DMA2_CHANNEL5_IT_MASK;
    }
  }
}
 8000460:	e014      	b.n	800048c <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA2_Channel3)
  {
    /* Reset interrupt pending bits for DMA2 Channel3 */
    DMA2->IFCR |= DMA2_CHANNEL3_IT_MASK;
  }
  else if (DMAy_Channelx == DMA2_Channel4)
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	4a18      	ldr	r2, [pc, #96]	; (80004c8 <DMA_DeInit+0x170>)
 8000466:	4293      	cmp	r3, r2
 8000468:	d106      	bne.n	8000478 <DMA_DeInit+0x120>
  {
    /* Reset interrupt pending bits for DMA2 Channel4 */
    DMA2->IFCR |= DMA2_CHANNEL4_IT_MASK;
 800046a:	4a14      	ldr	r2, [pc, #80]	; (80004bc <DMA_DeInit+0x164>)
 800046c:	4b13      	ldr	r3, [pc, #76]	; (80004bc <DMA_DeInit+0x164>)
 800046e:	685b      	ldr	r3, [r3, #4]
 8000470:	f443 4370 	orr.w	r3, r3, #61440	; 0xf000
 8000474:	6053      	str	r3, [r2, #4]
    {
      /* Reset interrupt pending bits for DMA2 Channel5 */
      DMA2->IFCR |= DMA2_CHANNEL5_IT_MASK;
    }
  }
}
 8000476:	e009      	b.n	800048c <DMA_DeInit+0x134>
    /* Reset interrupt pending bits for DMA2 Channel4 */
    DMA2->IFCR |= DMA2_CHANNEL4_IT_MASK;
  }
  else
  { 
    if (DMAy_Channelx == DMA2_Channel5)
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	4a14      	ldr	r2, [pc, #80]	; (80004cc <DMA_DeInit+0x174>)
 800047c:	4293      	cmp	r3, r2
 800047e:	d105      	bne.n	800048c <DMA_DeInit+0x134>
    {
      /* Reset interrupt pending bits for DMA2 Channel5 */
      DMA2->IFCR |= DMA2_CHANNEL5_IT_MASK;
 8000480:	4a0e      	ldr	r2, [pc, #56]	; (80004bc <DMA_DeInit+0x164>)
 8000482:	4b0e      	ldr	r3, [pc, #56]	; (80004bc <DMA_DeInit+0x164>)
 8000484:	685b      	ldr	r3, [r3, #4]
 8000486:	f443 2370 	orr.w	r3, r3, #983040	; 0xf0000
 800048a:	6053      	str	r3, [r2, #4]
    }
  }
}
 800048c:	bf00      	nop
 800048e:	370c      	adds	r7, #12
 8000490:	46bd      	mov	sp, r7
 8000492:	bc80      	pop	{r7}
 8000494:	4770      	bx	lr
 8000496:	bf00      	nop
 8000498:	40026008 	.word	0x40026008
 800049c:	40026000 	.word	0x40026000
 80004a0:	4002601c 	.word	0x4002601c
 80004a4:	40026030 	.word	0x40026030
 80004a8:	40026044 	.word	0x40026044
 80004ac:	40026058 	.word	0x40026058
 80004b0:	4002606c 	.word	0x4002606c
 80004b4:	40026080 	.word	0x40026080
 80004b8:	40026408 	.word	0x40026408
 80004bc:	40026400 	.word	0x40026400
 80004c0:	4002641c 	.word	0x4002641c
 80004c4:	40026430 	.word	0x40026430
 80004c8:	40026444 	.word	0x40026444
 80004cc:	40026458 	.word	0x40026458

080004d0 <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that
  *         contains the configuration information for the specified DMA Channel.
  * @retval None
  */
void DMA_Init(DMA_Channel_TypeDef* DMAy_Channelx, DMA_InitTypeDef* DMA_InitStruct)
{
 80004d0:	b480      	push	{r7}
 80004d2:	b085      	sub	sp, #20
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	6078      	str	r0, [r7, #4]
 80004d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80004da:	2300      	movs	r3, #0
 80004dc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DMA_PRIORITY(DMA_InitStruct->DMA_Priority));
  assert_param(IS_DMA_M2M_STATE(DMA_InitStruct->DMA_M2M));

/*--------------------------- DMAy Channelx CCR Configuration -----------------*/
  /* Get the DMAy_Channelx CCR value */
  tmpreg = DMAy_Channelx->CCR;
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	60fb      	str	r3, [r7, #12]
  /* Clear MEM2MEM, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= CCR_CLEAR_MASK;
 80004e4:	68fb      	ldr	r3, [r7, #12]
 80004e6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80004ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80004ee:	60fb      	str	r3, [r7, #12]
  /* Set MINC bit according to DMA_MemoryInc value */
  /* Set PSIZE bits according to DMA_PeripheralDataSize value */
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set PL bits according to DMA_Priority value */
  /* Set the MEM2MEM bit according to DMA_M2M value */
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 80004f0:	683b      	ldr	r3, [r7, #0]
 80004f2:	689a      	ldr	r2, [r3, #8]
 80004f4:	683b      	ldr	r3, [r7, #0]
 80004f6:	6a1b      	ldr	r3, [r3, #32]
 80004f8:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 80004fa:	683b      	ldr	r3, [r7, #0]
 80004fc:	691b      	ldr	r3, [r3, #16]
  /* Set MINC bit according to DMA_MemoryInc value */
  /* Set PSIZE bits according to DMA_PeripheralDataSize value */
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set PL bits according to DMA_Priority value */
  /* Set the MEM2MEM bit according to DMA_M2M value */
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 80004fe:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8000500:	683b      	ldr	r3, [r7, #0]
 8000502:	695b      	ldr	r3, [r3, #20]
 8000504:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8000506:	683b      	ldr	r3, [r7, #0]
 8000508:	699b      	ldr	r3, [r3, #24]
  /* Set PSIZE bits according to DMA_PeripheralDataSize value */
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set PL bits according to DMA_Priority value */
  /* Set the MEM2MEM bit according to DMA_M2M value */
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 800050a:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 800050c:	683b      	ldr	r3, [r7, #0]
 800050e:	69db      	ldr	r3, [r3, #28]
 8000510:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Priority | DMA_InitStruct->DMA_M2M;
 8000512:	683b      	ldr	r3, [r7, #0]
 8000514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set PL bits according to DMA_Priority value */
  /* Set the MEM2MEM bit according to DMA_M2M value */
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8000516:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Priority | DMA_InitStruct->DMA_M2M;
 8000518:	683b      	ldr	r3, [r7, #0]
 800051a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800051c:	4313      	orrs	r3, r2
  /* Set MINC bit according to DMA_MemoryInc value */
  /* Set PSIZE bits according to DMA_PeripheralDataSize value */
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set PL bits according to DMA_Priority value */
  /* Set the MEM2MEM bit according to DMA_M2M value */
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 800051e:	68fa      	ldr	r2, [r7, #12]
 8000520:	4313      	orrs	r3, r2
 8000522:	60fb      	str	r3, [r7, #12]
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Priority | DMA_InitStruct->DMA_M2M;

  /* Write to DMAy Channelx CCR */
  DMAy_Channelx->CCR = tmpreg;
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	68fa      	ldr	r2, [r7, #12]
 8000528:	601a      	str	r2, [r3, #0]

/*--------------------------- DMAy Channelx CNDTR Configuration ---------------*/
  /* Write to DMAy Channelx CNDTR */
  DMAy_Channelx->CNDTR = DMA_InitStruct->DMA_BufferSize;
 800052a:	683b      	ldr	r3, [r7, #0]
 800052c:	68da      	ldr	r2, [r3, #12]
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	605a      	str	r2, [r3, #4]

/*--------------------------- DMAy Channelx CPAR Configuration ----------------*/
  /* Write to DMAy Channelx CPAR */
  DMAy_Channelx->CPAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 8000532:	683b      	ldr	r3, [r7, #0]
 8000534:	681a      	ldr	r2, [r3, #0]
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	609a      	str	r2, [r3, #8]

/*--------------------------- DMAy Channelx CMAR Configuration ----------------*/
  /* Write to DMAy Channelx CMAR */
  DMAy_Channelx->CMAR = DMA_InitStruct->DMA_MemoryBaseAddr;
 800053a:	683b      	ldr	r3, [r7, #0]
 800053c:	685a      	ldr	r2, [r3, #4]
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	60da      	str	r2, [r3, #12]
}
 8000542:	bf00      	nop
 8000544:	3714      	adds	r7, #20
 8000546:	46bd      	mov	sp, r7
 8000548:	bc80      	pop	{r7}
 800054a:	4770      	bx	lr

0800054c <DMA_Cmd>:
  * @param  NewState: new state of the DMAy Channelx. 
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DMA_Cmd(DMA_Channel_TypeDef* DMAy_Channelx, FunctionalState NewState)
{
 800054c:	b480      	push	{r7}
 800054e:	b083      	sub	sp, #12
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
 8000554:	460b      	mov	r3, r1
 8000556:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000558:	78fb      	ldrb	r3, [r7, #3]
 800055a:	2b00      	cmp	r3, #0
 800055c:	d006      	beq.n	800056c <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Channelx */
    DMAy_Channelx->CCR |= DMA_CCR1_EN;
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	f043 0201 	orr.w	r2, r3, #1
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected DMAy Channelx */
    DMAy_Channelx->CCR &= (uint16_t)(~DMA_CCR1_EN);
  }
}
 800056a:	e006      	b.n	800057a <DMA_Cmd+0x2e>
    DMAy_Channelx->CCR |= DMA_CCR1_EN;
  }
  else
  {
    /* Disable the selected DMAy Channelx */
    DMAy_Channelx->CCR &= (uint16_t)(~DMA_CCR1_EN);
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	681a      	ldr	r2, [r3, #0]
 8000570:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8000574:	4013      	ands	r3, r2
 8000576:	687a      	ldr	r2, [r7, #4]
 8000578:	6013      	str	r3, [r2, #0]
  }
}
 800057a:	bf00      	nop
 800057c:	370c      	adds	r7, #12
 800057e:	46bd      	mov	sp, r7
 8000580:	bc80      	pop	{r7}
 8000582:	4770      	bx	lr

08000584 <DMA_ITConfig>:
  * @param  NewState: new state of the specified DMA interrupts.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DMA_ITConfig(DMA_Channel_TypeDef* DMAy_Channelx, uint32_t DMA_IT, FunctionalState NewState)
{
 8000584:	b480      	push	{r7}
 8000586:	b085      	sub	sp, #20
 8000588:	af00      	add	r7, sp, #0
 800058a:	60f8      	str	r0, [r7, #12]
 800058c:	60b9      	str	r1, [r7, #8]
 800058e:	4613      	mov	r3, r2
 8000590:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
  assert_param(IS_DMA_CONFIG_IT(DMA_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000592:	79fb      	ldrb	r3, [r7, #7]
 8000594:	2b00      	cmp	r3, #0
 8000596:	d006      	beq.n	80005a6 <DMA_ITConfig+0x22>
  {
    /* Enable the selected DMA interrupts */
    DMAy_Channelx->CCR |= DMA_IT;
 8000598:	68fb      	ldr	r3, [r7, #12]
 800059a:	681a      	ldr	r2, [r3, #0]
 800059c:	68bb      	ldr	r3, [r7, #8]
 800059e:	431a      	orrs	r2, r3
 80005a0:	68fb      	ldr	r3, [r7, #12]
 80005a2:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected DMA interrupts */
    DMAy_Channelx->CCR &= ~DMA_IT;
  }
}
 80005a4:	e006      	b.n	80005b4 <DMA_ITConfig+0x30>
    DMAy_Channelx->CCR |= DMA_IT;
  }
  else
  {
    /* Disable the selected DMA interrupts */
    DMAy_Channelx->CCR &= ~DMA_IT;
 80005a6:	68fb      	ldr	r3, [r7, #12]
 80005a8:	681a      	ldr	r2, [r3, #0]
 80005aa:	68bb      	ldr	r3, [r7, #8]
 80005ac:	43db      	mvns	r3, r3
 80005ae:	401a      	ands	r2, r3
 80005b0:	68fb      	ldr	r3, [r7, #12]
 80005b2:	601a      	str	r2, [r3, #0]
  }
}
 80005b4:	bf00      	nop
 80005b6:	3714      	adds	r7, #20
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bc80      	pop	{r7}
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop

080005c0 <DMA_GetITStatus>:
  *    DMAy_IT_HTx or DMAy_IT_TEx). 
  *      
  * @retval The new state of DMAy_IT (SET or RESET).
  */
ITStatus DMA_GetITStatus(uint32_t DMAy_IT)
{
 80005c0:	b480      	push	{r7}
 80005c2:	b085      	sub	sp, #20
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
 80005c8:	2300      	movs	r3, #0
 80005ca:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpreg = 0;
 80005cc:	2300      	movs	r3, #0
 80005ce:	60bb      	str	r3, [r7, #8]
 
  /* Check the parameters */
  assert_param(IS_DMA_GET_IT(DMAy_IT));

  /* Calculate the used DMAy */
  if ((DMAy_IT & FLAG_MASK) == (uint32_t)RESET)
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d103      	bne.n	80005e2 <DMA_GetITStatus+0x22>
  {
    /* Get DMA1 ISR register value */
    tmpreg = DMA1->ISR;
 80005da:	4b0b      	ldr	r3, [pc, #44]	; (8000608 <DMA_GetITStatus+0x48>)
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	60bb      	str	r3, [r7, #8]
 80005e0:	e002      	b.n	80005e8 <DMA_GetITStatus+0x28>
  }
  else
  {
    /* Get DMA2 ISR register value */
    tmpreg = DMA2->ISR;
 80005e2:	4b0a      	ldr	r3, [pc, #40]	; (800060c <DMA_GetITStatus+0x4c>)
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	60bb      	str	r3, [r7, #8]
  }
  
  /* Check the status of the specified DMAy interrupt */
  if ((tmpreg & DMAy_IT) != (uint32_t)RESET)
 80005e8:	68ba      	ldr	r2, [r7, #8]
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	4013      	ands	r3, r2
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d002      	beq.n	80005f8 <DMA_GetITStatus+0x38>
  {
    /* DMAy_IT is set */
    bitstatus = SET;
 80005f2:	2301      	movs	r3, #1
 80005f4:	73fb      	strb	r3, [r7, #15]
 80005f6:	e001      	b.n	80005fc <DMA_GetITStatus+0x3c>
  }
  else
  {
    /* DMAy_IT is reset */
    bitstatus = RESET;
 80005f8:	2300      	movs	r3, #0
 80005fa:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the DMAy_IT status */
  return  bitstatus;
 80005fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80005fe:	4618      	mov	r0, r3
 8000600:	3714      	adds	r7, #20
 8000602:	46bd      	mov	sp, r7
 8000604:	bc80      	pop	{r7}
 8000606:	4770      	bx	lr
 8000608:	40026000 	.word	0x40026000
 800060c:	40026400 	.word	0x40026400

08000610 <DMA_ClearITPendingBit>:
  *    DMAy_IT_TEx).  
  *        
  * @retval None
  */
void DMA_ClearITPendingBit(uint32_t DMAy_IT)
{
 8000610:	b480      	push	{r7}
 8000612:	b083      	sub	sp, #12
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_CLEAR_IT(DMAy_IT));

  /* Calculate the used DMAy */
  if ((DMAy_IT & FLAG_MASK) == (uint32_t)RESET)
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800061e:	2b00      	cmp	r3, #0
 8000620:	d103      	bne.n	800062a <DMA_ClearITPendingBit+0x1a>
  {
    /* Clear the selected DMAy interrupt pending bits */
    DMA1->IFCR = DMAy_IT;
 8000622:	4a06      	ldr	r2, [pc, #24]	; (800063c <DMA_ClearITPendingBit+0x2c>)
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	6053      	str	r3, [r2, #4]
  else
  {
    /* Clear the selected DMAy interrupt pending bits */
    DMA2->IFCR = DMAy_IT;
  }  
}
 8000628:	e002      	b.n	8000630 <DMA_ClearITPendingBit+0x20>
    DMA1->IFCR = DMAy_IT;
  }
  else
  {
    /* Clear the selected DMAy interrupt pending bits */
    DMA2->IFCR = DMAy_IT;
 800062a:	4a05      	ldr	r2, [pc, #20]	; (8000640 <DMA_ClearITPendingBit+0x30>)
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	6053      	str	r3, [r2, #4]
  }  
}
 8000630:	bf00      	nop
 8000632:	370c      	adds	r7, #12
 8000634:	46bd      	mov	sp, r7
 8000636:	bc80      	pop	{r7}
 8000638:	4770      	bx	lr
 800063a:	bf00      	nop
 800063c:	40026000 	.word	0x40026000
 8000640:	40026400 	.word	0x40026400

08000644 <GPIO_Init>:
  *         peripheral.

  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000644:	b480      	push	{r7}
 8000646:	b087      	sub	sp, #28
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
 800064c:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 800064e:	2300      	movs	r3, #0
 8000650:	617b      	str	r3, [r7, #20]
 8000652:	2300      	movs	r3, #0
 8000654:	613b      	str	r3, [r7, #16]
 8000656:	2300      	movs	r3, #0
 8000658:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 800065a:	2300      	movs	r3, #0
 800065c:	617b      	str	r3, [r7, #20]
 800065e:	e07e      	b.n	800075e <GPIO_Init+0x11a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8000660:	2201      	movs	r2, #1
 8000662:	697b      	ldr	r3, [r7, #20]
 8000664:	fa02 f303 	lsl.w	r3, r2, r3
 8000668:	613b      	str	r3, [r7, #16]

    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 800066a:	683b      	ldr	r3, [r7, #0]
 800066c:	681a      	ldr	r2, [r3, #0]
 800066e:	693b      	ldr	r3, [r7, #16]
 8000670:	4013      	ands	r3, r2
 8000672:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8000674:	68fa      	ldr	r2, [r7, #12]
 8000676:	693b      	ldr	r3, [r7, #16]
 8000678:	429a      	cmp	r2, r3
 800067a:	d16d      	bne.n	8000758 <GPIO_Init+0x114>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	681a      	ldr	r2, [r3, #0]
 8000680:	697b      	ldr	r3, [r7, #20]
 8000682:	005b      	lsls	r3, r3, #1
 8000684:	2103      	movs	r1, #3
 8000686:	fa01 f303 	lsl.w	r3, r1, r3
 800068a:	43db      	mvns	r3, r3
 800068c:	401a      	ands	r2, r3
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	601a      	str	r2, [r3, #0]

      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	681a      	ldr	r2, [r3, #0]
 8000696:	683b      	ldr	r3, [r7, #0]
 8000698:	791b      	ldrb	r3, [r3, #4]
 800069a:	4619      	mov	r1, r3
 800069c:	697b      	ldr	r3, [r7, #20]
 800069e:	005b      	lsls	r3, r3, #1
 80006a0:	fa01 f303 	lsl.w	r3, r1, r3
 80006a4:	431a      	orrs	r2, r3
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 80006aa:	683b      	ldr	r3, [r7, #0]
 80006ac:	791b      	ldrb	r3, [r3, #4]
 80006ae:	2b01      	cmp	r3, #1
 80006b0:	d003      	beq.n	80006ba <GPIO_Init+0x76>
 80006b2:	683b      	ldr	r3, [r7, #0]
 80006b4:	791b      	ldrb	r3, [r3, #4]
 80006b6:	2b02      	cmp	r3, #2
 80006b8:	d136      	bne.n	8000728 <GPIO_Init+0xe4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	689a      	ldr	r2, [r3, #8]
 80006be:	697b      	ldr	r3, [r7, #20]
 80006c0:	005b      	lsls	r3, r3, #1
 80006c2:	2103      	movs	r1, #3
 80006c4:	fa01 f303 	lsl.w	r3, r1, r3
 80006c8:	43db      	mvns	r3, r3
 80006ca:	401a      	ands	r2, r3
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	689a      	ldr	r2, [r3, #8]
 80006d4:	683b      	ldr	r3, [r7, #0]
 80006d6:	795b      	ldrb	r3, [r3, #5]
 80006d8:	4619      	mov	r1, r3
 80006da:	697b      	ldr	r3, [r7, #20]
 80006dc:	005b      	lsls	r3, r3, #1
 80006de:	fa01 f303 	lsl.w	r3, r1, r3
 80006e2:	431a      	orrs	r2, r3
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	609a      	str	r2, [r3, #8]

        /*Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration */
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	889b      	ldrh	r3, [r3, #4]
 80006ec:	b29a      	uxth	r2, r3
 80006ee:	697b      	ldr	r3, [r7, #20]
 80006f0:	b29b      	uxth	r3, r3
 80006f2:	2101      	movs	r1, #1
 80006f4:	fa01 f303 	lsl.w	r3, r1, r3
 80006f8:	b29b      	uxth	r3, r3
 80006fa:	43db      	mvns	r3, r3
 80006fc:	b29b      	uxth	r3, r3
 80006fe:	4013      	ands	r3, r2
 8000700:	b29a      	uxth	r2, r3
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	809a      	strh	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	889b      	ldrh	r3, [r3, #4]
 800070a:	b29b      	uxth	r3, r3
 800070c:	b21a      	sxth	r2, r3
 800070e:	683b      	ldr	r3, [r7, #0]
 8000710:	799b      	ldrb	r3, [r3, #6]
 8000712:	4619      	mov	r1, r3
 8000714:	697b      	ldr	r3, [r7, #20]
 8000716:	b29b      	uxth	r3, r3
 8000718:	fa01 f303 	lsl.w	r3, r1, r3
 800071c:	b21b      	sxth	r3, r3
 800071e:	4313      	orrs	r3, r2
 8000720:	b21b      	sxth	r3, r3
 8000722:	b29a      	uxth	r2, r3
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	809a      	strh	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	68da      	ldr	r2, [r3, #12]
 800072c:	697b      	ldr	r3, [r7, #20]
 800072e:	b29b      	uxth	r3, r3
 8000730:	005b      	lsls	r3, r3, #1
 8000732:	2103      	movs	r1, #3
 8000734:	fa01 f303 	lsl.w	r3, r1, r3
 8000738:	43db      	mvns	r3, r3
 800073a:	401a      	ands	r2, r3
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	68da      	ldr	r2, [r3, #12]
 8000744:	683b      	ldr	r3, [r7, #0]
 8000746:	79db      	ldrb	r3, [r3, #7]
 8000748:	4619      	mov	r1, r3
 800074a:	697b      	ldr	r3, [r7, #20]
 800074c:	005b      	lsls	r3, r3, #1
 800074e:	fa01 f303 	lsl.w	r3, r1, r3
 8000752:	431a      	orrs	r2, r3
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	60da      	str	r2, [r3, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000758:	697b      	ldr	r3, [r7, #20]
 800075a:	3301      	adds	r3, #1
 800075c:	617b      	str	r3, [r7, #20]
 800075e:	697b      	ldr	r3, [r7, #20]
 8000760:	2b0f      	cmp	r3, #15
 8000762:	f67f af7d 	bls.w	8000660 <GPIO_Init+0x1c>
      /* Pull-up Pull down resistor configuration */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 8000766:	bf00      	nop
 8000768:	371c      	adds	r7, #28
 800076a:	46bd      	mov	sp, r7
 800076c:	bc80      	pop	{r7}
 800076e:	4770      	bx	lr

08000770 <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *   This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000770:	b480      	push	{r7}
 8000772:	b085      	sub	sp, #20
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
 8000778:	460b      	mov	r3, r1
 800077a:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 800077c:	2300      	movs	r3, #0
 800077e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	8a1b      	ldrh	r3, [r3, #16]
 8000784:	b29a      	uxth	r2, r3
 8000786:	887b      	ldrh	r3, [r7, #2]
 8000788:	4013      	ands	r3, r2
 800078a:	b29b      	uxth	r3, r3
 800078c:	2b00      	cmp	r3, #0
 800078e:	d002      	beq.n	8000796 <GPIO_ReadInputDataBit+0x26>
  {
    bitstatus = (uint8_t)Bit_SET;
 8000790:	2301      	movs	r3, #1
 8000792:	73fb      	strb	r3, [r7, #15]
 8000794:	e001      	b.n	800079a <GPIO_ReadInputDataBit+0x2a>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 8000796:	2300      	movs	r3, #0
 8000798:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800079a:	7bfb      	ldrb	r3, [r7, #15]
}
 800079c:	4618      	mov	r0, r3
 800079e:	3714      	adds	r7, #20
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bc80      	pop	{r7}
 80007a4:	4770      	bx	lr
 80007a6:	bf00      	nop

080007a8 <GPIO_PinAFConfig>:
  *        alternate function I/O pins.  
  * @note EVENTOUT is not mapped on PH0, PH1 and PH2.  
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 80007a8:	b480      	push	{r7}
 80007aa:	b085      	sub	sp, #20
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
 80007b0:	460b      	mov	r3, r1
 80007b2:	807b      	strh	r3, [r7, #2]
 80007b4:	4613      	mov	r3, r2
 80007b6:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 80007b8:	2300      	movs	r3, #0
 80007ba:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 80007bc:	2300      	movs	r3, #0
 80007be:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 80007c0:	787a      	ldrb	r2, [r7, #1]
 80007c2:	887b      	ldrh	r3, [r7, #2]
 80007c4:	f003 0307 	and.w	r3, r3, #7
 80007c8:	009b      	lsls	r3, r3, #2
 80007ca:	fa02 f303 	lsl.w	r3, r2, r3
 80007ce:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 80007d0:	887b      	ldrh	r3, [r7, #2]
 80007d2:	08db      	lsrs	r3, r3, #3
 80007d4:	b29b      	uxth	r3, r3
 80007d6:	4618      	mov	r0, r3
 80007d8:	887b      	ldrh	r3, [r7, #2]
 80007da:	08db      	lsrs	r3, r3, #3
 80007dc:	b29b      	uxth	r3, r3
 80007de:	461a      	mov	r2, r3
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	3208      	adds	r2, #8
 80007e4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80007e8:	887b      	ldrh	r3, [r7, #2]
 80007ea:	f003 0307 	and.w	r3, r3, #7
 80007ee:	009b      	lsls	r3, r3, #2
 80007f0:	210f      	movs	r1, #15
 80007f2:	fa01 f303 	lsl.w	r3, r1, r3
 80007f6:	43db      	mvns	r3, r3
 80007f8:	ea02 0103 	and.w	r1, r2, r3
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	f100 0208 	add.w	r2, r0, #8
 8000802:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8000806:	887b      	ldrh	r3, [r7, #2]
 8000808:	08db      	lsrs	r3, r3, #3
 800080a:	b29b      	uxth	r3, r3
 800080c:	461a      	mov	r2, r3
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	3208      	adds	r2, #8
 8000812:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000816:	68fb      	ldr	r3, [r7, #12]
 8000818:	4313      	orrs	r3, r2
 800081a:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 800081c:	887b      	ldrh	r3, [r7, #2]
 800081e:	08db      	lsrs	r3, r3, #3
 8000820:	b29b      	uxth	r3, r3
 8000822:	461a      	mov	r2, r3
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	3208      	adds	r2, #8
 8000828:	68b9      	ldr	r1, [r7, #8]
 800082a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 800082e:	bf00      	nop
 8000830:	3714      	adds	r7, #20
 8000832:	46bd      	mov	sp, r7
 8000834:	bc80      	pop	{r7}
 8000836:	4770      	bx	lr

08000838 <RCC_GetClocksFreq>:
  *           configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8000838:	b480      	push	{r7}
 800083a:	b089      	sub	sp, #36	; 0x24
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmul = 0, plldiv = 0, pllsource = 0, presc = 0, msirange = 0;
 8000840:	2300      	movs	r3, #0
 8000842:	61fb      	str	r3, [r7, #28]
 8000844:	2300      	movs	r3, #0
 8000846:	61bb      	str	r3, [r7, #24]
 8000848:	2300      	movs	r3, #0
 800084a:	617b      	str	r3, [r7, #20]
 800084c:	2300      	movs	r3, #0
 800084e:	613b      	str	r3, [r7, #16]
 8000850:	2300      	movs	r3, #0
 8000852:	60fb      	str	r3, [r7, #12]
 8000854:	2300      	movs	r3, #0
 8000856:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000858:	4b5f      	ldr	r3, [pc, #380]	; (80009d8 <RCC_GetClocksFreq+0x1a0>)
 800085a:	689b      	ldr	r3, [r3, #8]
 800085c:	f003 030c 	and.w	r3, r3, #12
 8000860:	61fb      	str	r3, [r7, #28]
  
  switch (tmp)
 8000862:	69fb      	ldr	r3, [r7, #28]
 8000864:	2b0c      	cmp	r3, #12
 8000866:	d865      	bhi.n	8000934 <RCC_GetClocksFreq+0xfc>
 8000868:	a201      	add	r2, pc, #4	; (adr r2, 8000870 <RCC_GetClocksFreq+0x38>)
 800086a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800086e:	bf00      	nop
 8000870:	080008a5 	.word	0x080008a5
 8000874:	08000935 	.word	0x08000935
 8000878:	08000935 	.word	0x08000935
 800087c:	08000935 	.word	0x08000935
 8000880:	080008c5 	.word	0x080008c5
 8000884:	08000935 	.word	0x08000935
 8000888:	08000935 	.word	0x08000935
 800088c:	08000935 	.word	0x08000935
 8000890:	080008cd 	.word	0x080008cd
 8000894:	08000935 	.word	0x08000935
 8000898:	08000935 	.word	0x08000935
 800089c:	08000935 	.word	0x08000935
 80008a0:	080008d5 	.word	0x080008d5
  {
    case 0x00:  /* MSI used as system clock */
      msirange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> 13;
 80008a4:	4b4c      	ldr	r3, [pc, #304]	; (80009d8 <RCC_GetClocksFreq+0x1a0>)
 80008a6:	685b      	ldr	r3, [r3, #4]
 80008a8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80008ac:	0b5b      	lsrs	r3, r3, #13
 80008ae:	60bb      	str	r3, [r7, #8]
      RCC_Clocks->SYSCLK_Frequency = (32768 * (1 << (msirange + 1)));
 80008b0:	68bb      	ldr	r3, [r7, #8]
 80008b2:	3301      	adds	r3, #1
 80008b4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80008b8:	fa02 f303 	lsl.w	r3, r2, r3
 80008bc:	461a      	mov	r2, r3
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	601a      	str	r2, [r3, #0]
      break;
 80008c2:	e047      	b.n	8000954 <RCC_GetClocksFreq+0x11c>
    case 0x04:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	4a45      	ldr	r2, [pc, #276]	; (80009dc <RCC_GetClocksFreq+0x1a4>)
 80008c8:	601a      	str	r2, [r3, #0]
      break;
 80008ca:	e043      	b.n	8000954 <RCC_GetClocksFreq+0x11c>
    case 0x08:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	4a44      	ldr	r2, [pc, #272]	; (80009e0 <RCC_GetClocksFreq+0x1a8>)
 80008d0:	601a      	str	r2, [r3, #0]
      break;
 80008d2:	e03f      	b.n	8000954 <RCC_GetClocksFreq+0x11c>
    case 0x0C:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmul = RCC->CFGR & RCC_CFGR_PLLMUL;
 80008d4:	4b40      	ldr	r3, [pc, #256]	; (80009d8 <RCC_GetClocksFreq+0x1a0>)
 80008d6:	689b      	ldr	r3, [r3, #8]
 80008d8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80008dc:	61bb      	str	r3, [r7, #24]
      plldiv = RCC->CFGR & RCC_CFGR_PLLDIV;
 80008de:	4b3e      	ldr	r3, [pc, #248]	; (80009d8 <RCC_GetClocksFreq+0x1a0>)
 80008e0:	689b      	ldr	r3, [r3, #8]
 80008e2:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80008e6:	617b      	str	r3, [r7, #20]
      pllmul = PLLMulTable[(pllmul >> 18)];
 80008e8:	69bb      	ldr	r3, [r7, #24]
 80008ea:	0c9b      	lsrs	r3, r3, #18
 80008ec:	4a3d      	ldr	r2, [pc, #244]	; (80009e4 <RCC_GetClocksFreq+0x1ac>)
 80008ee:	5cd3      	ldrb	r3, [r2, r3]
 80008f0:	b2db      	uxtb	r3, r3
 80008f2:	61bb      	str	r3, [r7, #24]
      plldiv = (plldiv >> 22) + 1;
 80008f4:	697b      	ldr	r3, [r7, #20]
 80008f6:	0d9b      	lsrs	r3, r3, #22
 80008f8:	3301      	adds	r3, #1
 80008fa:	617b      	str	r3, [r7, #20]
      
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 80008fc:	4b36      	ldr	r3, [pc, #216]	; (80009d8 <RCC_GetClocksFreq+0x1a0>)
 80008fe:	689b      	ldr	r3, [r3, #8]
 8000900:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000904:	613b      	str	r3, [r7, #16]

      if (pllsource == 0x00)
 8000906:	693b      	ldr	r3, [r7, #16]
 8000908:	2b00      	cmp	r3, #0
 800090a:	d109      	bne.n	8000920 <RCC_GetClocksFreq+0xe8>
      {
        /* HSI oscillator clock selected as PLL clock source */
        RCC_Clocks->SYSCLK_Frequency = (((HSI_VALUE) * pllmul) / plldiv);
 800090c:	69bb      	ldr	r3, [r7, #24]
 800090e:	4a33      	ldr	r2, [pc, #204]	; (80009dc <RCC_GetClocksFreq+0x1a4>)
 8000910:	fb02 f203 	mul.w	r2, r2, r3
 8000914:	697b      	ldr	r3, [r7, #20]
 8000916:	fbb2 f2f3 	udiv	r2, r2, r3
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	601a      	str	r2, [r3, #0]
      else
      {
        /* HSE selected as PLL clock source */
        RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE) * pllmul) / plldiv);
      }
      break;
 800091e:	e019      	b.n	8000954 <RCC_GetClocksFreq+0x11c>
        RCC_Clocks->SYSCLK_Frequency = (((HSI_VALUE) * pllmul) / plldiv);
      }
      else
      {
        /* HSE selected as PLL clock source */
        RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE) * pllmul) / plldiv);
 8000920:	69bb      	ldr	r3, [r7, #24]
 8000922:	4a2f      	ldr	r2, [pc, #188]	; (80009e0 <RCC_GetClocksFreq+0x1a8>)
 8000924:	fb02 f203 	mul.w	r2, r2, r3
 8000928:	697b      	ldr	r3, [r7, #20]
 800092a:	fbb2 f2f3 	udiv	r2, r2, r3
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	601a      	str	r2, [r3, #0]
      }
      break;
 8000932:	e00f      	b.n	8000954 <RCC_GetClocksFreq+0x11c>
    default: /* MSI used as system clock */
      msirange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> 13;
 8000934:	4b28      	ldr	r3, [pc, #160]	; (80009d8 <RCC_GetClocksFreq+0x1a0>)
 8000936:	685b      	ldr	r3, [r3, #4]
 8000938:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800093c:	0b5b      	lsrs	r3, r3, #13
 800093e:	60bb      	str	r3, [r7, #8]
      RCC_Clocks->SYSCLK_Frequency = (32768 * (1 << (msirange + 1)));
 8000940:	68bb      	ldr	r3, [r7, #8]
 8000942:	3301      	adds	r3, #1
 8000944:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000948:	fa02 f303 	lsl.w	r3, r2, r3
 800094c:	461a      	mov	r2, r3
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	601a      	str	r2, [r3, #0]
      break;
 8000952:	bf00      	nop
  }
  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8000954:	4b20      	ldr	r3, [pc, #128]	; (80009d8 <RCC_GetClocksFreq+0x1a0>)
 8000956:	689b      	ldr	r3, [r3, #8]
 8000958:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800095c:	61fb      	str	r3, [r7, #28]
  tmp = tmp >> 4;
 800095e:	69fb      	ldr	r3, [r7, #28]
 8000960:	091b      	lsrs	r3, r3, #4
 8000962:	61fb      	str	r3, [r7, #28]
  presc = APBAHBPrescTable[tmp]; 
 8000964:	4a20      	ldr	r2, [pc, #128]	; (80009e8 <RCC_GetClocksFreq+0x1b0>)
 8000966:	69fb      	ldr	r3, [r7, #28]
 8000968:	4413      	add	r3, r2
 800096a:	781b      	ldrb	r3, [r3, #0]
 800096c:	b2db      	uxtb	r3, r3
 800096e:	60fb      	str	r3, [r7, #12]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	681a      	ldr	r2, [r3, #0]
 8000974:	68fb      	ldr	r3, [r7, #12]
 8000976:	40da      	lsrs	r2, r3
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 800097c:	4b16      	ldr	r3, [pc, #88]	; (80009d8 <RCC_GetClocksFreq+0x1a0>)
 800097e:	689b      	ldr	r3, [r3, #8]
 8000980:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000984:	61fb      	str	r3, [r7, #28]
  tmp = tmp >> 8;
 8000986:	69fb      	ldr	r3, [r7, #28]
 8000988:	0a1b      	lsrs	r3, r3, #8
 800098a:	61fb      	str	r3, [r7, #28]
  presc = APBAHBPrescTable[tmp];
 800098c:	4a16      	ldr	r2, [pc, #88]	; (80009e8 <RCC_GetClocksFreq+0x1b0>)
 800098e:	69fb      	ldr	r3, [r7, #28]
 8000990:	4413      	add	r3, r2
 8000992:	781b      	ldrb	r3, [r3, #0]
 8000994:	b2db      	uxtb	r3, r3
 8000996:	60fb      	str	r3, [r7, #12]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	685a      	ldr	r2, [r3, #4]
 800099c:	68fb      	ldr	r3, [r7, #12]
 800099e:	40da      	lsrs	r2, r3
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 80009a4:	4b0c      	ldr	r3, [pc, #48]	; (80009d8 <RCC_GetClocksFreq+0x1a0>)
 80009a6:	689b      	ldr	r3, [r3, #8]
 80009a8:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80009ac:	61fb      	str	r3, [r7, #28]
  tmp = tmp >> 11;
 80009ae:	69fb      	ldr	r3, [r7, #28]
 80009b0:	0adb      	lsrs	r3, r3, #11
 80009b2:	61fb      	str	r3, [r7, #28]
  presc = APBAHBPrescTable[tmp];
 80009b4:	4a0c      	ldr	r2, [pc, #48]	; (80009e8 <RCC_GetClocksFreq+0x1b0>)
 80009b6:	69fb      	ldr	r3, [r7, #28]
 80009b8:	4413      	add	r3, r2
 80009ba:	781b      	ldrb	r3, [r3, #0]
 80009bc:	b2db      	uxtb	r3, r3
 80009be:	60fb      	str	r3, [r7, #12]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	685a      	ldr	r2, [r3, #4]
 80009c4:	68fb      	ldr	r3, [r7, #12]
 80009c6:	40da      	lsrs	r2, r3
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	60da      	str	r2, [r3, #12]
}
 80009cc:	bf00      	nop
 80009ce:	3724      	adds	r7, #36	; 0x24
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bc80      	pop	{r7}
 80009d4:	4770      	bx	lr
 80009d6:	bf00      	nop
 80009d8:	40023800 	.word	0x40023800
 80009dc:	00f42400 	.word	0x00f42400
 80009e0:	007a1200 	.word	0x007a1200
 80009e4:	20000000 	.word	0x20000000
 80009e8:	2000000c 	.word	0x2000000c

080009ec <RCC_AHBPeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
 80009ec:	b480      	push	{r7}
 80009ee:	b083      	sub	sp, #12
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
 80009f4:	460b      	mov	r3, r1
 80009f6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80009f8:	78fb      	ldrb	r3, [r7, #3]
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d006      	beq.n	8000a0c <RCC_AHBPeriphClockCmd+0x20>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
 80009fe:	4909      	ldr	r1, [pc, #36]	; (8000a24 <RCC_AHBPeriphClockCmd+0x38>)
 8000a00:	4b08      	ldr	r3, [pc, #32]	; (8000a24 <RCC_AHBPeriphClockCmd+0x38>)
 8000a02:	69da      	ldr	r2, [r3, #28]
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	4313      	orrs	r3, r2
 8000a08:	61cb      	str	r3, [r1, #28]
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
  }
}
 8000a0a:	e006      	b.n	8000a1a <RCC_AHBPeriphClockCmd+0x2e>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
 8000a0c:	4905      	ldr	r1, [pc, #20]	; (8000a24 <RCC_AHBPeriphClockCmd+0x38>)
 8000a0e:	4b05      	ldr	r3, [pc, #20]	; (8000a24 <RCC_AHBPeriphClockCmd+0x38>)
 8000a10:	69da      	ldr	r2, [r3, #28]
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	43db      	mvns	r3, r3
 8000a16:	4013      	ands	r3, r2
 8000a18:	61cb      	str	r3, [r1, #28]
  }
}
 8000a1a:	bf00      	nop
 8000a1c:	370c      	adds	r7, #12
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bc80      	pop	{r7}
 8000a22:	4770      	bx	lr
 8000a24:	40023800 	.word	0x40023800

08000a28 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	b083      	sub	sp, #12
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
 8000a30:	460b      	mov	r3, r1
 8000a32:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000a34:	78fb      	ldrb	r3, [r7, #3]
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d006      	beq.n	8000a48 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8000a3a:	4909      	ldr	r1, [pc, #36]	; (8000a60 <RCC_APB1PeriphClockCmd+0x38>)
 8000a3c:	4b08      	ldr	r3, [pc, #32]	; (8000a60 <RCC_APB1PeriphClockCmd+0x38>)
 8000a3e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	4313      	orrs	r3, r2
 8000a44:	624b      	str	r3, [r1, #36]	; 0x24
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 8000a46:	e006      	b.n	8000a56 <RCC_APB1PeriphClockCmd+0x2e>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8000a48:	4905      	ldr	r1, [pc, #20]	; (8000a60 <RCC_APB1PeriphClockCmd+0x38>)
 8000a4a:	4b05      	ldr	r3, [pc, #20]	; (8000a60 <RCC_APB1PeriphClockCmd+0x38>)
 8000a4c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	43db      	mvns	r3, r3
 8000a52:	4013      	ands	r3, r2
 8000a54:	624b      	str	r3, [r1, #36]	; 0x24
  }
}
 8000a56:	bf00      	nop
 8000a58:	370c      	adds	r7, #12
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bc80      	pop	{r7}
 8000a5e:	4770      	bx	lr
 8000a60:	40023800 	.word	0x40023800

08000a64 <TIM_TimeBaseInit>:
  *         structure that contains the configuration information for
  *         the specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 8000a64:	b480      	push	{r7}
 8000a66:	b085      	sub	sp, #20
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
 8000a6c:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	881b      	ldrh	r3, [r3, #0]
 8000a76:	81fb      	strh	r3, [r7, #14]

  if(((TIMx) == TIM2) || ((TIMx) == TIM3) || ((TIMx) == TIM4) || ((TIMx) == TIM5))
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000a7e:	d00b      	beq.n	8000a98 <TIM_TimeBaseInit+0x34>
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	4a1c      	ldr	r2, [pc, #112]	; (8000af4 <TIM_TimeBaseInit+0x90>)
 8000a84:	4293      	cmp	r3, r2
 8000a86:	d007      	beq.n	8000a98 <TIM_TimeBaseInit+0x34>
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	4a1b      	ldr	r2, [pc, #108]	; (8000af8 <TIM_TimeBaseInit+0x94>)
 8000a8c:	4293      	cmp	r3, r2
 8000a8e:	d003      	beq.n	8000a98 <TIM_TimeBaseInit+0x34>
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	4a1a      	ldr	r2, [pc, #104]	; (8000afc <TIM_TimeBaseInit+0x98>)
 8000a94:	4293      	cmp	r3, r2
 8000a96:	d108      	bne.n	8000aaa <TIM_TimeBaseInit+0x46>
  {											
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~((uint16_t)(TIM_CR1_DIR | TIM_CR1_CMS)));
 8000a98:	89fb      	ldrh	r3, [r7, #14]
 8000a9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000a9e:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 8000aa0:	683b      	ldr	r3, [r7, #0]
 8000aa2:	885a      	ldrh	r2, [r3, #2]
 8000aa4:	89fb      	ldrh	r3, [r7, #14]
 8000aa6:	4313      	orrs	r3, r2
 8000aa8:	81fb      	strh	r3, [r7, #14]
  }
 
  if(((TIMx) != TIM6) && ((TIMx) != TIM7))
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	4a14      	ldr	r2, [pc, #80]	; (8000b00 <TIM_TimeBaseInit+0x9c>)
 8000aae:	4293      	cmp	r3, r2
 8000ab0:	d00c      	beq.n	8000acc <TIM_TimeBaseInit+0x68>
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	4a13      	ldr	r2, [pc, #76]	; (8000b04 <TIM_TimeBaseInit+0xa0>)
 8000ab6:	4293      	cmp	r3, r2
 8000ab8:	d008      	beq.n	8000acc <TIM_TimeBaseInit+0x68>
  {
    /* Set the clock division */
    tmpcr1 &= (uint16_t)(~((uint16_t)TIM_CR1_CKD));
 8000aba:	89fb      	ldrh	r3, [r7, #14]
 8000abc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000ac0:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 8000ac2:	683b      	ldr	r3, [r7, #0]
 8000ac4:	891a      	ldrh	r2, [r3, #8]
 8000ac6:	89fb      	ldrh	r3, [r7, #14]
 8000ac8:	4313      	orrs	r3, r2
 8000aca:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	89fa      	ldrh	r2, [r7, #14]
 8000ad0:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 8000ad2:	683b      	ldr	r3, [r7, #0]
 8000ad4:	685a      	ldr	r2, [r3, #4]
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 8000ada:	683b      	ldr	r3, [r7, #0]
 8000adc:	881a      	ldrh	r2, [r3, #0]
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	851a      	strh	r2, [r3, #40]	; 0x28
    
  /* Generate an update event to reload the Prescaler value immediatly */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	2201      	movs	r2, #1
 8000ae6:	829a      	strh	r2, [r3, #20]
}
 8000ae8:	bf00      	nop
 8000aea:	3714      	adds	r7, #20
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bc80      	pop	{r7}
 8000af0:	4770      	bx	lr
 8000af2:	bf00      	nop
 8000af4:	40000400 	.word	0x40000400
 8000af8:	40000800 	.word	0x40000800
 8000afc:	40000c00 	.word	0x40000c00
 8000b00:	40001000 	.word	0x40001000
 8000b04:	40001400 	.word	0x40001400

08000b08 <TIM_TimeBaseStructInit>:
  * @param  TIM_TimeBaseInitStruct : pointer to a TIM_TimeBaseInitTypeDef
  *         structure which will be initialized.
  * @retval None
  */
void TIM_TimeBaseStructInit(TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	b083      	sub	sp, #12
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_TimeBaseInitStruct->TIM_Period = 0xFFFFFFFF;
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	f04f 32ff 	mov.w	r2, #4294967295
 8000b16:	605a      	str	r2, [r3, #4]
  TIM_TimeBaseInitStruct->TIM_Prescaler = 0x0000;
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	801a      	strh	r2, [r3, #0]
  TIM_TimeBaseInitStruct->TIM_ClockDivision = TIM_CKD_DIV1;
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	2200      	movs	r2, #0
 8000b22:	811a      	strh	r2, [r3, #8]
  TIM_TimeBaseInitStruct->TIM_CounterMode = TIM_CounterMode_Up;
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	2200      	movs	r2, #0
 8000b28:	805a      	strh	r2, [r3, #2]
}
 8000b2a:	bf00      	nop
 8000b2c:	370c      	adds	r7, #12
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bc80      	pop	{r7}
 8000b32:	4770      	bx	lr

08000b34 <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8000b34:	b480      	push	{r7}
 8000b36:	b083      	sub	sp, #12
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
 8000b3c:	460b      	mov	r3, r1
 8000b3e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000b40:	78fb      	ldrb	r3, [r7, #3]
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d008      	beq.n	8000b58 <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	881b      	ldrh	r3, [r3, #0]
 8000b4a:	b29b      	uxth	r3, r3
 8000b4c:	f043 0301 	orr.w	r3, r3, #1
 8000b50:	b29a      	uxth	r2, r3
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
  }
}
 8000b56:	e007      	b.n	8000b68 <TIM_Cmd+0x34>
    TIMx->CR1 |= TIM_CR1_CEN;
  }
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	881b      	ldrh	r3, [r3, #0]
 8000b5c:	b29b      	uxth	r3, r3
 8000b5e:	f023 0301 	bic.w	r3, r3, #1
 8000b62:	b29a      	uxth	r2, r3
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	801a      	strh	r2, [r3, #0]
  }
}
 8000b68:	bf00      	nop
 8000b6a:	370c      	adds	r7, #12
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bc80      	pop	{r7}
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop

08000b74 <TIM_SelectOutputTrigger>:
  *     @arg TIM_TRGOSource_OC4Ref: OC4REF signal is used as the trigger output (TRGO).
  *
  * @retval None
  */
void TIM_SelectOutputTrigger(TIM_TypeDef* TIMx, uint16_t TIM_TRGOSource)
{
 8000b74:	b480      	push	{r7}
 8000b76:	b083      	sub	sp, #12
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
 8000b7c:	460b      	mov	r3, r1
 8000b7e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST5_PERIPH(TIMx));
  assert_param(IS_TIM_TRGO_SOURCE(TIM_TRGOSource));

  /* Reset the MMS Bits */
  TIMx->CR2 &= (uint16_t)~((uint16_t)TIM_CR2_MMS);
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	889b      	ldrh	r3, [r3, #4]
 8000b84:	b29b      	uxth	r3, r3
 8000b86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000b8a:	b29a      	uxth	r2, r3
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	809a      	strh	r2, [r3, #4]
  /* Select the TRGO source */
  TIMx->CR2 |=  TIM_TRGOSource;
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	889b      	ldrh	r3, [r3, #4]
 8000b94:	b29a      	uxth	r2, r3
 8000b96:	887b      	ldrh	r3, [r7, #2]
 8000b98:	4313      	orrs	r3, r2
 8000b9a:	b29a      	uxth	r2, r3
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	809a      	strh	r2, [r3, #4]
}
 8000ba0:	bf00      	nop
 8000ba2:	370c      	adds	r7, #12
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bc80      	pop	{r7}
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop

08000bac <USART_Init>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that 
  *        contains the configuration information for the specified USART peripheral.
  * @retval None.
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b08a      	sub	sp, #40	; 0x28
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
 8000bb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	627b      	str	r3, [r7, #36]	; 0x24
 8000bba:	2300      	movs	r3, #0
 8000bbc:	623b      	str	r3, [r7, #32]
  uint32_t integerdivider = 0x00;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	61fb      	str	r3, [r7, #28]
  uint32_t fractionaldivider = 0x00;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }
   
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	8a1b      	ldrh	r3, [r3, #16]
 8000bca:	b29b      	uxth	r3, r3
 8000bcc:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8000bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bd0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000bd4:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 8000bd6:	683b      	ldr	r3, [r7, #0]
 8000bd8:	88db      	ldrh	r3, [r3, #6]
 8000bda:	461a      	mov	r2, r3
 8000bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bde:	4313      	orrs	r3, r2
 8000be0:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8000be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000be4:	b29a      	uxth	r2, r3
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	899b      	ldrh	r3, [r3, #12]
 8000bee:	b29b      	uxth	r3, r3
 8000bf0:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 8000bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bf4:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8000bf8:	f023 030c 	bic.w	r3, r3, #12
 8000bfc:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8000bfe:	683b      	ldr	r3, [r7, #0]
 8000c00:	889a      	ldrh	r2, [r3, #4]
 8000c02:	683b      	ldr	r3, [r7, #0]
 8000c04:	891b      	ldrh	r3, [r3, #8]
 8000c06:	4313      	orrs	r3, r2
 8000c08:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 8000c0a:	683b      	ldr	r3, [r7, #0]
 8000c0c:	895b      	ldrh	r3, [r3, #10]

  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8000c0e:	4313      	orrs	r3, r2
 8000c10:	b29b      	uxth	r3, r3
 8000c12:	461a      	mov	r2, r3
 8000c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c16:	4313      	orrs	r3, r2
 8000c18:	627b      	str	r3, [r7, #36]	; 0x24
            USART_InitStruct->USART_Mode;

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 8000c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c1c:	b29a      	uxth	r2, r3
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	8a9b      	ldrh	r3, [r3, #20]
 8000c26:	b29b      	uxth	r3, r3
 8000c28:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 8000c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000c30:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 8000c32:	683b      	ldr	r3, [r7, #0]
 8000c34:	899b      	ldrh	r3, [r3, #12]
 8000c36:	461a      	mov	r2, r3
 8000c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c3a:	4313      	orrs	r3, r2
 8000c3c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 8000c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c40:	b29a      	uxth	r2, r3
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 8000c46:	f107 0308 	add.w	r3, r7, #8
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	f7ff fdf4 	bl	8000838 <RCC_GetClocksFreq>
  if (USARTx == USART1) 
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	4a2e      	ldr	r2, [pc, #184]	; (8000d0c <USART_Init+0x160>)
 8000c54:	4293      	cmp	r3, r2
 8000c56:	d102      	bne.n	8000c5e <USART_Init+0xb2>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 8000c58:	697b      	ldr	r3, [r7, #20]
 8000c5a:	623b      	str	r3, [r7, #32]
 8000c5c:	e001      	b.n	8000c62 <USART_Init+0xb6>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 8000c5e:	693b      	ldr	r3, [r7, #16]
 8000c60:	623b      	str	r3, [r7, #32]
  }

  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	899b      	ldrh	r3, [r3, #12]
 8000c66:	b29b      	uxth	r3, r3
 8000c68:	b21b      	sxth	r3, r3
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	da0c      	bge.n	8000c88 <USART_Init+0xdc>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 8000c6e:	6a3a      	ldr	r2, [r7, #32]
 8000c70:	4613      	mov	r3, r2
 8000c72:	009b      	lsls	r3, r3, #2
 8000c74:	4413      	add	r3, r2
 8000c76:	009a      	lsls	r2, r3, #2
 8000c78:	441a      	add	r2, r3
 8000c7a:	683b      	ldr	r3, [r7, #0]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	005b      	lsls	r3, r3, #1
 8000c80:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c84:	61fb      	str	r3, [r7, #28]
 8000c86:	e00b      	b.n	8000ca0 <USART_Init+0xf4>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 8000c88:	6a3a      	ldr	r2, [r7, #32]
 8000c8a:	4613      	mov	r3, r2
 8000c8c:	009b      	lsls	r3, r3, #2
 8000c8e:	4413      	add	r3, r2
 8000c90:	009a      	lsls	r2, r3, #2
 8000c92:	441a      	add	r2, r3
 8000c94:	683b      	ldr	r3, [r7, #0]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	009b      	lsls	r3, r3, #2
 8000c9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c9e:	61fb      	str	r3, [r7, #28]
  }
  tmpreg = (integerdivider / 100) << 4;
 8000ca0:	69fb      	ldr	r3, [r7, #28]
 8000ca2:	4a1b      	ldr	r2, [pc, #108]	; (8000d10 <USART_Init+0x164>)
 8000ca4:	fba2 2303 	umull	r2, r3, r2, r3
 8000ca8:	095b      	lsrs	r3, r3, #5
 8000caa:	011b      	lsls	r3, r3, #4
 8000cac:	627b      	str	r3, [r7, #36]	; 0x24

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 8000cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cb0:	091b      	lsrs	r3, r3, #4
 8000cb2:	2264      	movs	r2, #100	; 0x64
 8000cb4:	fb02 f303 	mul.w	r3, r2, r3
 8000cb8:	69fa      	ldr	r2, [r7, #28]
 8000cba:	1ad3      	subs	r3, r2, r3
 8000cbc:	61bb      	str	r3, [r7, #24]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	899b      	ldrh	r3, [r3, #12]
 8000cc2:	b29b      	uxth	r3, r3
 8000cc4:	b21b      	sxth	r3, r3
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	da0c      	bge.n	8000ce4 <USART_Init+0x138>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 8000cca:	69bb      	ldr	r3, [r7, #24]
 8000ccc:	00db      	lsls	r3, r3, #3
 8000cce:	3332      	adds	r3, #50	; 0x32
 8000cd0:	4a0f      	ldr	r2, [pc, #60]	; (8000d10 <USART_Init+0x164>)
 8000cd2:	fba2 2303 	umull	r2, r3, r2, r3
 8000cd6:	095b      	lsrs	r3, r3, #5
 8000cd8:	f003 0307 	and.w	r3, r3, #7
 8000cdc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000cde:	4313      	orrs	r3, r2
 8000ce0:	627b      	str	r3, [r7, #36]	; 0x24
 8000ce2:	e00b      	b.n	8000cfc <USART_Init+0x150>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 8000ce4:	69bb      	ldr	r3, [r7, #24]
 8000ce6:	011b      	lsls	r3, r3, #4
 8000ce8:	3332      	adds	r3, #50	; 0x32
 8000cea:	4a09      	ldr	r2, [pc, #36]	; (8000d10 <USART_Init+0x164>)
 8000cec:	fba2 2303 	umull	r2, r3, r2, r3
 8000cf0:	095b      	lsrs	r3, r3, #5
 8000cf2:	f003 030f 	and.w	r3, r3, #15
 8000cf6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000cf8:	4313      	orrs	r3, r2
 8000cfa:	627b      	str	r3, [r7, #36]	; 0x24
  }
 
  /* Write to USART BRR */
  USARTx->BRR = (uint16_t)tmpreg;
 8000cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cfe:	b29a      	uxth	r2, r3
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	811a      	strh	r2, [r3, #8]
}
 8000d04:	bf00      	nop
 8000d06:	3728      	adds	r7, #40	; 0x28
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd80      	pop	{r7, pc}
 8000d0c:	40013800 	.word	0x40013800
 8000d10:	51eb851f 	.word	0x51eb851f

08000d14 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8000d14:	b480      	push	{r7}
 8000d16:	b083      	sub	sp, #12
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
 8000d1c:	460b      	mov	r3, r1
 8000d1e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000d20:	78fb      	ldrb	r3, [r7, #3]
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d008      	beq.n	8000d38 <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	899b      	ldrh	r3, [r3, #12]
 8000d2a:	b29b      	uxth	r3, r3
 8000d2c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000d30:	b29a      	uxth	r2, r3
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
  }
}
 8000d36:	e007      	b.n	8000d48 <USART_Cmd+0x34>
    USARTx->CR1 |= USART_CR1_UE;
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	899b      	ldrh	r3, [r3, #12]
 8000d3c:	b29b      	uxth	r3, r3
 8000d3e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000d42:	b29a      	uxth	r2, r3
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	819a      	strh	r2, [r3, #12]
  }
}
 8000d48:	bf00      	nop
 8000d4a:	370c      	adds	r7, #12
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bc80      	pop	{r7}
 8000d50:	4770      	bx	lr
 8000d52:	bf00      	nop

08000d54 <USART_DMACmd>:
  * @param  NewState: new state of the DMA Request sources.
  *   This parameter can be: ENABLE or DISABLE.   
  * @retval None
  */
void USART_DMACmd(USART_TypeDef* USARTx, uint16_t USART_DMAReq, FunctionalState NewState)
{
 8000d54:	b480      	push	{r7}
 8000d56:	b083      	sub	sp, #12
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
 8000d5c:	460b      	mov	r3, r1
 8000d5e:	807b      	strh	r3, [r7, #2]
 8000d60:	4613      	mov	r3, r2
 8000d62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DMAREQ(USART_DMAReq));  
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 

  if (NewState != DISABLE)
 8000d64:	787b      	ldrb	r3, [r7, #1]
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d008      	beq.n	8000d7c <USART_DMACmd+0x28>
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	8a9b      	ldrh	r3, [r3, #20]
 8000d6e:	b29a      	uxth	r2, r3
 8000d70:	887b      	ldrh	r3, [r7, #2]
 8000d72:	4313      	orrs	r3, r2
 8000d74:	b29a      	uxth	r2, r3
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	829a      	strh	r2, [r3, #20]
  {
    /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 &= (uint16_t)~USART_DMAReq;
  }
}
 8000d7a:	e009      	b.n	8000d90 <USART_DMACmd+0x3c>
  }
  else
  {
    /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 &= (uint16_t)~USART_DMAReq;
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	8a9b      	ldrh	r3, [r3, #20]
 8000d80:	b29a      	uxth	r2, r3
 8000d82:	887b      	ldrh	r3, [r7, #2]
 8000d84:	43db      	mvns	r3, r3
 8000d86:	b29b      	uxth	r3, r3
 8000d88:	4013      	ands	r3, r2
 8000d8a:	b29a      	uxth	r2, r3
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	829a      	strh	r2, [r3, #20]
  }
}
 8000d90:	bf00      	nop
 8000d92:	370c      	adds	r7, #12
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bc80      	pop	{r7}
 8000d98:	4770      	bx	lr
 8000d9a:	bf00      	nop

08000d9c <edgeDetector>:
													0.800000, 0.810000, 0.820000, 0.830000, 0.840000, 0.850000, 0.860000, 0.870000, 0.880000, 0.890000,
													0.900000, 0.910000, 0.920000, 0.930000, 0.940000, 0.950000, 0.960000, 0.970000, 0.980000, 0.990000,
													1.000000 };

/* Rising and falling edge detector for nucleo button */
void edgeDetector(void) {
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b082      	sub	sp, #8
 8000da0:	af00      	add	r7, sp, #0
	static uint8_t previous_state;
	int actual_state;
	actual_state = GPIO_ReadInputDataBit(GPIOC,GPIO_Pin_13);
 8000da2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000da6:	4812      	ldr	r0, [pc, #72]	; (8000df0 <edgeDetector+0x54>)
 8000da8:	f7ff fce2 	bl	8000770 <GPIO_ReadInputDataBit>
 8000dac:	4603      	mov	r3, r0
 8000dae:	607b      	str	r3, [r7, #4]
	if (((actual_state == 1) && (previous_state == 1)) || ((actual_state == 0) && (previous_state == 0))){
			previous_state = actual_state;
	}
	*/

	if (((actual_state == 1) && (previous_state == 0))){
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	2b01      	cmp	r3, #1
 8000db4:	d10a      	bne.n	8000dcc <edgeDetector+0x30>
 8000db6:	4b0f      	ldr	r3, [pc, #60]	; (8000df4 <edgeDetector+0x58>)
 8000db8:	781b      	ldrb	r3, [r3, #0]
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d106      	bne.n	8000dcc <edgeDetector+0x30>
			previous_state = actual_state;
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	b2da      	uxtb	r2, r3
 8000dc2:	4b0c      	ldr	r3, [pc, #48]	; (8000df4 <edgeDetector+0x58>)
 8000dc4:	701a      	strb	r2, [r3, #0]
			make_sound = 0;
 8000dc6:	4b0c      	ldr	r3, [pc, #48]	; (8000df8 <edgeDetector+0x5c>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	601a      	str	r2, [r3, #0]
		}

	if (((actual_state == 0) && (previous_state == 1))){
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d10a      	bne.n	8000de8 <edgeDetector+0x4c>
 8000dd2:	4b08      	ldr	r3, [pc, #32]	; (8000df4 <edgeDetector+0x58>)
 8000dd4:	781b      	ldrb	r3, [r3, #0]
 8000dd6:	2b01      	cmp	r3, #1
 8000dd8:	d106      	bne.n	8000de8 <edgeDetector+0x4c>
			previous_state = actual_state;
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	b2da      	uxtb	r2, r3
 8000dde:	4b05      	ldr	r3, [pc, #20]	; (8000df4 <edgeDetector+0x58>)
 8000de0:	701a      	strb	r2, [r3, #0]
			make_sound = 1;
 8000de2:	4b05      	ldr	r3, [pc, #20]	; (8000df8 <edgeDetector+0x5c>)
 8000de4:	2201      	movs	r2, #1
 8000de6:	601a      	str	r2, [r3, #0]
		}

}
 8000de8:	bf00      	nop
 8000dea:	3708      	adds	r7, #8
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	40020800 	.word	0x40020800
 8000df4:	2000003c 	.word	0x2000003c
 8000df8:	20000188 	.word	0x20000188

08000dfc <set_params>:
	adsr_count++;
	if (adsr_count == ADSR_WAVEFORM_RES) adsr_count = 0;
	//memcpy(&current_waveform,&copied_array,sizeof(uint16_t)*WAVEFORM_RES);
}

void set_params() {
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	af00      	add	r7, sp, #0
	TIM6_Config(calc_timer_period(params.osc1_freq));
 8000e00:	4b10      	ldr	r3, [pc, #64]	; (8000e44 <set_params+0x48>)
 8000e02:	881b      	ldrh	r3, [r3, #0]
 8000e04:	4618      	mov	r0, r3
 8000e06:	f000 fbd1 	bl	80015ac <calc_timer_period>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	b29b      	uxth	r3, r3
 8000e0e:	4618      	mov	r0, r3
 8000e10:	f000 f90e 	bl	8001030 <TIM6_Config>
	TIM7_Config(calc_timer_period(params.osc2_freq));
 8000e14:	4b0b      	ldr	r3, [pc, #44]	; (8000e44 <set_params+0x48>)
 8000e16:	889b      	ldrh	r3, [r3, #4]
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f000 fbc7 	bl	80015ac <calc_timer_period>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	b29b      	uxth	r3, r3
 8000e22:	4618      	mov	r0, r3
 8000e24:	f000 f92a 	bl	800107c <TIM7_Config>

	set_waveform(params.osc1_waveform, 1);
 8000e28:	4b06      	ldr	r3, [pc, #24]	; (8000e44 <set_params+0x48>)
 8000e2a:	789b      	ldrb	r3, [r3, #2]
 8000e2c:	2101      	movs	r1, #1
 8000e2e:	4618      	mov	r0, r3
 8000e30:	f000 fb56 	bl	80014e0 <set_waveform>
	set_waveform(params.osc2_waveform, 2);
 8000e34:	4b03      	ldr	r3, [pc, #12]	; (8000e44 <set_params+0x48>)
 8000e36:	799b      	ldrb	r3, [r3, #6]
 8000e38:	2102      	movs	r1, #2
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f000 fb50 	bl	80014e0 <set_waveform>

}
 8000e40:	bf00      	nop
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	20000054 	.word	0x20000054

08000e48 <DMA1_Channel6_IRQHandler>:

void DMA1_Channel6_IRQHandler(void) {
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	af00      	add	r7, sp, #0
  /* Test on DMA Stream Transfer Complete interrupt */
  if (DMA_GetITStatus(DMA1_IT_TC6))
 8000e4c:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8000e50:	f7ff fbb6 	bl	80005c0 <DMA_GetITStatus>
 8000e54:	4603      	mov	r3, r0
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d049      	beq.n	8000eee <DMA1_Channel6_IRQHandler+0xa6>
  {
    /* Clear DMA Stream Transfer Complete interrupt pending bit */
    DMA_ClearITPendingBit(DMA1_IT_TC6);
 8000e5a:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8000e5e:	f7ff fbd7 	bl	8000610 <DMA_ClearITPendingBit>

    if (uart_dma_buffer[0] == 0x0e) { // && (uart_dma_buffer[UART_DMA_BUFFER_SIZE-1] == 0x0f)) {
 8000e62:	4b24      	ldr	r3, [pc, #144]	; (8000ef4 <DMA1_Channel6_IRQHandler+0xac>)
 8000e64:	781b      	ldrb	r3, [r3, #0]
 8000e66:	2b0e      	cmp	r3, #14
 8000e68:	d141      	bne.n	8000eee <DMA1_Channel6_IRQHandler+0xa6>

    	/* Set OSC1 waveform */
    	switch (uart_dma_buffer[2]) {
 8000e6a:	4b22      	ldr	r3, [pc, #136]	; (8000ef4 <DMA1_Channel6_IRQHandler+0xac>)
 8000e6c:	789b      	ldrb	r3, [r3, #2]
 8000e6e:	2b02      	cmp	r3, #2
 8000e70:	d007      	beq.n	8000e82 <DMA1_Channel6_IRQHandler+0x3a>
 8000e72:	2b03      	cmp	r3, #3
 8000e74:	d009      	beq.n	8000e8a <DMA1_Channel6_IRQHandler+0x42>
 8000e76:	2b01      	cmp	r3, #1
 8000e78:	d10b      	bne.n	8000e92 <DMA1_Channel6_IRQHandler+0x4a>
    		case 0x01:
    			params.osc1_waveform = SINE;
 8000e7a:	4b1f      	ldr	r3, [pc, #124]	; (8000ef8 <DMA1_Channel6_IRQHandler+0xb0>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	709a      	strb	r2, [r3, #2]
    			break;
 8000e80:	e007      	b.n	8000e92 <DMA1_Channel6_IRQHandler+0x4a>
    		case 0x02:
    			params.osc1_waveform = SQUARE;
 8000e82:	4b1d      	ldr	r3, [pc, #116]	; (8000ef8 <DMA1_Channel6_IRQHandler+0xb0>)
 8000e84:	2201      	movs	r2, #1
 8000e86:	709a      	strb	r2, [r3, #2]
    			break;
 8000e88:	e003      	b.n	8000e92 <DMA1_Channel6_IRQHandler+0x4a>
    		case 0x03:
    			params.osc1_waveform = SAWTOOTH;
 8000e8a:	4b1b      	ldr	r3, [pc, #108]	; (8000ef8 <DMA1_Channel6_IRQHandler+0xb0>)
 8000e8c:	2202      	movs	r2, #2
 8000e8e:	709a      	strb	r2, [r3, #2]
    			break;
 8000e90:	bf00      	nop
    	}

    	/* Set OSC2 waveform */
		switch (uart_dma_buffer[6]) {
 8000e92:	4b18      	ldr	r3, [pc, #96]	; (8000ef4 <DMA1_Channel6_IRQHandler+0xac>)
 8000e94:	799b      	ldrb	r3, [r3, #6]
 8000e96:	2b02      	cmp	r3, #2
 8000e98:	d007      	beq.n	8000eaa <DMA1_Channel6_IRQHandler+0x62>
 8000e9a:	2b03      	cmp	r3, #3
 8000e9c:	d009      	beq.n	8000eb2 <DMA1_Channel6_IRQHandler+0x6a>
 8000e9e:	2b01      	cmp	r3, #1
 8000ea0:	d10b      	bne.n	8000eba <DMA1_Channel6_IRQHandler+0x72>
			case 0x01:
				params.osc2_waveform = SINE;
 8000ea2:	4b15      	ldr	r3, [pc, #84]	; (8000ef8 <DMA1_Channel6_IRQHandler+0xb0>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	719a      	strb	r2, [r3, #6]
				break;
 8000ea8:	e007      	b.n	8000eba <DMA1_Channel6_IRQHandler+0x72>
			case 0x02:
				params.osc2_waveform = SQUARE;
 8000eaa:	4b13      	ldr	r3, [pc, #76]	; (8000ef8 <DMA1_Channel6_IRQHandler+0xb0>)
 8000eac:	2201      	movs	r2, #1
 8000eae:	719a      	strb	r2, [r3, #6]
				break;
 8000eb0:	e003      	b.n	8000eba <DMA1_Channel6_IRQHandler+0x72>
			case 0x03:
				params.osc2_waveform = SAWTOOTH;
 8000eb2:	4b11      	ldr	r3, [pc, #68]	; (8000ef8 <DMA1_Channel6_IRQHandler+0xb0>)
 8000eb4:	2202      	movs	r2, #2
 8000eb6:	719a      	strb	r2, [r3, #6]
				break;
 8000eb8:	bf00      	nop
		}

		/* Set OSC1 Frequency */
		params.osc1_freq = uart_dma_buffer[3] | uart_dma_buffer[4] << 8;
 8000eba:	4b0e      	ldr	r3, [pc, #56]	; (8000ef4 <DMA1_Channel6_IRQHandler+0xac>)
 8000ebc:	78db      	ldrb	r3, [r3, #3]
 8000ebe:	b21a      	sxth	r2, r3
 8000ec0:	4b0c      	ldr	r3, [pc, #48]	; (8000ef4 <DMA1_Channel6_IRQHandler+0xac>)
 8000ec2:	791b      	ldrb	r3, [r3, #4]
 8000ec4:	021b      	lsls	r3, r3, #8
 8000ec6:	b21b      	sxth	r3, r3
 8000ec8:	4313      	orrs	r3, r2
 8000eca:	b21b      	sxth	r3, r3
 8000ecc:	b29a      	uxth	r2, r3
 8000ece:	4b0a      	ldr	r3, [pc, #40]	; (8000ef8 <DMA1_Channel6_IRQHandler+0xb0>)
 8000ed0:	801a      	strh	r2, [r3, #0]

		/* Set OSC2 Frequency */
		params.osc2_freq = uart_dma_buffer[7] | uart_dma_buffer[8] << 8;
 8000ed2:	4b08      	ldr	r3, [pc, #32]	; (8000ef4 <DMA1_Channel6_IRQHandler+0xac>)
 8000ed4:	79db      	ldrb	r3, [r3, #7]
 8000ed6:	b21a      	sxth	r2, r3
 8000ed8:	4b06      	ldr	r3, [pc, #24]	; (8000ef4 <DMA1_Channel6_IRQHandler+0xac>)
 8000eda:	7a1b      	ldrb	r3, [r3, #8]
 8000edc:	021b      	lsls	r3, r3, #8
 8000ede:	b21b      	sxth	r3, r3
 8000ee0:	4313      	orrs	r3, r2
 8000ee2:	b21b      	sxth	r3, r3
 8000ee4:	b29a      	uxth	r2, r3
 8000ee6:	4b04      	ldr	r3, [pc, #16]	; (8000ef8 <DMA1_Channel6_IRQHandler+0xb0>)
 8000ee8:	809a      	strh	r2, [r3, #4]

		set_params();
 8000eea:	f7ff ff87 	bl	8000dfc <set_params>
    }
  }
}
 8000eee:	bf00      	nop
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	2000005c 	.word	0x2000005c
 8000ef8:	20000054 	.word	0x20000054

08000efc <main>:
**  Abstract: main program
**
**===========================================================================
*/
int main(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b0c2      	sub	sp, #264	; 0x108
 8000f00:	af00      	add	r7, sp, #0
  int i = 0;
 8000f02:	2300      	movs	r3, #0
 8000f04:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

  /* TODO - Add your application code here */

  /*Do the basic inits here*/
  uint16_t help_array[WAVEFORM_RES];
  make_sound = 0;
 8000f08:	4b1d      	ldr	r3, [pc, #116]	; (8000f80 <main+0x84>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	601a      	str	r2, [r3, #0]
  basic_init();
 8000f0e:	f000 f9d7 	bl	80012c0 <basic_init>
  NVIC_Config();
 8000f12:	f000 f9bb 	bl	800128c <NVIC_Config>
  USART2_Config();
 8000f16:	f000 f95f 	bl	80011d8 <USART2_Config>
  set_waveform(SINE, 1);
 8000f1a:	2101      	movs	r1, #1
 8000f1c:	2000      	movs	r0, #0
 8000f1e:	f000 fadf 	bl	80014e0 <set_waveform>
  set_waveform(SINE, 2);
 8000f22:	2102      	movs	r1, #2
 8000f24:	2000      	movs	r0, #0
 8000f26:	f000 fadb 	bl	80014e0 <set_waveform>
  OSC1_Freq = 262;
 8000f2a:	4b16      	ldr	r3, [pc, #88]	; (8000f84 <main+0x88>)
 8000f2c:	f44f 7283 	mov.w	r2, #262	; 0x106
 8000f30:	601a      	str	r2, [r3, #0]
  LFO1_Freq = 2;
 8000f32:	4b15      	ldr	r3, [pc, #84]	; (8000f88 <main+0x8c>)
 8000f34:	2202      	movs	r2, #2
 8000f36:	701a      	strb	r2, [r3, #0]
  OSC2_Freq = 311;
 8000f38:	4b14      	ldr	r3, [pc, #80]	; (8000f8c <main+0x90>)
 8000f3a:	f240 1237 	movw	r2, #311	; 0x137
 8000f3e:	601a      	str	r2, [r3, #0]
  //memcpy(&current_waveform,&help_array,sizeof(uint16_t)*WAVEFORM_RES);
  DAC1_Config(&current_waveform_osc_1);
 8000f40:	4813      	ldr	r0, [pc, #76]	; (8000f90 <main+0x94>)
 8000f42:	f000 f8c1 	bl	80010c8 <DAC1_Config>
  DAC2_Config(&current_waveform_osc_2);
 8000f46:	4813      	ldr	r0, [pc, #76]	; (8000f94 <main+0x98>)
 8000f48:	f000 f902 	bl	8001150 <DAC2_Config>
  TIM6_Config(calc_timer_period(OSC1_Freq));
 8000f4c:	4b0d      	ldr	r3, [pc, #52]	; (8000f84 <main+0x88>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	4618      	mov	r0, r3
 8000f52:	f000 fb2b 	bl	80015ac <calc_timer_period>
 8000f56:	4603      	mov	r3, r0
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f000 f869 	bl	8001030 <TIM6_Config>
  TIM7_Config(calc_timer_period(OSC2_Freq));
 8000f5e:	4b0b      	ldr	r3, [pc, #44]	; (8000f8c <main+0x90>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	4618      	mov	r0, r3
 8000f64:	f000 fb22 	bl	80015ac <calc_timer_period>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f000 f886 	bl	800107c <TIM7_Config>

  /* Infinite loop */
  while (1)
  {
	edgeDetector();
 8000f70:	f7ff ff14 	bl	8000d9c <edgeDetector>
	i++;
 8000f74:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8000f78:	3301      	adds	r3, #1
 8000f7a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
  }
 8000f7e:	e7f7      	b.n	8000f70 <main+0x74>
 8000f80:	20000188 	.word	0x20000188
 8000f84:	20000184 	.word	0x20000184
 8000f88:	20000075 	.word	0x20000075
 8000f8c:	20000048 	.word	0x20000048
 8000f90:	20000078 	.word	0x20000078
 8000f94:	200001a0 	.word	0x200001a0

08000f98 <NVIC_SetPriority>:

    \param [in]      IRQn  Number of the interrupt for set priority
    \param [in]  priority  Priority to set
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b083      	sub	sp, #12
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	6039      	str	r1, [r7, #0]
 8000fa2:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 8000fa4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	da0b      	bge.n	8000fc4 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8000fac:	490d      	ldr	r1, [pc, #52]	; (8000fe4 <NVIC_SetPriority+0x4c>)
 8000fae:	79fb      	ldrb	r3, [r7, #7]
 8000fb0:	f003 030f 	and.w	r3, r3, #15
 8000fb4:	3b04      	subs	r3, #4
 8000fb6:	683a      	ldr	r2, [r7, #0]
 8000fb8:	b2d2      	uxtb	r2, r2
 8000fba:	0112      	lsls	r2, r2, #4
 8000fbc:	b2d2      	uxtb	r2, r2
 8000fbe:	440b      	add	r3, r1
 8000fc0:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
 8000fc2:	e009      	b.n	8000fd8 <NVIC_SetPriority+0x40>
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8000fc4:	4908      	ldr	r1, [pc, #32]	; (8000fe8 <NVIC_SetPriority+0x50>)
 8000fc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fca:	683a      	ldr	r2, [r7, #0]
 8000fcc:	b2d2      	uxtb	r2, r2
 8000fce:	0112      	lsls	r2, r2, #4
 8000fd0:	b2d2      	uxtb	r2, r2
 8000fd2:	440b      	add	r3, r1
 8000fd4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000fd8:	bf00      	nop
 8000fda:	370c      	adds	r7, #12
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bc80      	pop	{r7}
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop
 8000fe4:	e000ed00 	.word	0xe000ed00
 8000fe8:	e000e100 	.word	0xe000e100

08000fec <SysTick_Config>:
    \param [in]  ticks  Number of ticks between two interrupts
    \return          0  Function succeeded
    \return          1  Function failed
 */
static __INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b082      	sub	sp, #8
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ffa:	d301      	bcc.n	8001000 <SysTick_Config+0x14>
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	e011      	b.n	8001024 <SysTick_Config+0x38>

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 8001000:	4a0a      	ldr	r2, [pc, #40]	; (800102c <SysTick_Config+0x40>)
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001008:	3b01      	subs	r3, #1
 800100a:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Cortex-M0 System Interrupts */
 800100c:	210f      	movs	r1, #15
 800100e:	f04f 30ff 	mov.w	r0, #4294967295
 8001012:	f7ff ffc1 	bl	8000f98 <NVIC_SetPriority>
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 8001016:	4b05      	ldr	r3, [pc, #20]	; (800102c <SysTick_Config+0x40>)
 8001018:	2200      	movs	r2, #0
 800101a:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800101c:	4b03      	ldr	r3, [pc, #12]	; (800102c <SysTick_Config+0x40>)
 800101e:	2207      	movs	r2, #7
 8001020:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  return (0);                                                  /* Function successful */
 8001022:	2300      	movs	r3, #0
}
 8001024:	4618      	mov	r0, r3
 8001026:	3708      	adds	r7, #8
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}
 800102c:	e000e010 	.word	0xe000e010

08001030 <TIM6_Config>:
 */

#include "periph_config.h"

void TIM6_Config(uint16_t timer_period)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b086      	sub	sp, #24
 8001034:	af00      	add	r7, sp, #0
 8001036:	4603      	mov	r3, r0
 8001038:	80fb      	strh	r3, [r7, #6]
  TIM_TimeBaseInitTypeDef TIM6_TimeBase;

  RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM6, ENABLE);
 800103a:	2101      	movs	r1, #1
 800103c:	2010      	movs	r0, #16
 800103e:	f7ff fcf3 	bl	8000a28 <RCC_APB1PeriphClockCmd>

  TIM_TimeBaseStructInit(&TIM6_TimeBase);
 8001042:	f107 030c 	add.w	r3, r7, #12
 8001046:	4618      	mov	r0, r3
 8001048:	f7ff fd5e 	bl	8000b08 <TIM_TimeBaseStructInit>
  TIM6_TimeBase.TIM_Period        = timer_period;
 800104c:	88fb      	ldrh	r3, [r7, #6]
 800104e:	613b      	str	r3, [r7, #16]
  TIM6_TimeBase.TIM_Prescaler     = 0;
 8001050:	2300      	movs	r3, #0
 8001052:	81bb      	strh	r3, [r7, #12]
  TIM6_TimeBase.TIM_ClockDivision = 0;
 8001054:	2300      	movs	r3, #0
 8001056:	82bb      	strh	r3, [r7, #20]
  TIM6_TimeBase.TIM_CounterMode   = TIM_CounterMode_Up;
 8001058:	2300      	movs	r3, #0
 800105a:	81fb      	strh	r3, [r7, #14]

  TIM_TimeBaseInit(TIM6, &TIM6_TimeBase);
 800105c:	f107 030c 	add.w	r3, r7, #12
 8001060:	4619      	mov	r1, r3
 8001062:	4805      	ldr	r0, [pc, #20]	; (8001078 <TIM6_Config+0x48>)
 8001064:	f7ff fcfe 	bl	8000a64 <TIM_TimeBaseInit>
  TIM_SelectOutputTrigger(TIM6, TIM_TRGOSource_Update);
 8001068:	2120      	movs	r1, #32
 800106a:	4803      	ldr	r0, [pc, #12]	; (8001078 <TIM6_Config+0x48>)
 800106c:	f7ff fd82 	bl	8000b74 <TIM_SelectOutputTrigger>

}
 8001070:	bf00      	nop
 8001072:	3718      	adds	r7, #24
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	40001000 	.word	0x40001000

0800107c <TIM7_Config>:

void TIM7_Config(uint16_t timer_period)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b086      	sub	sp, #24
 8001080:	af00      	add	r7, sp, #0
 8001082:	4603      	mov	r3, r0
 8001084:	80fb      	strh	r3, [r7, #6]
  TIM_TimeBaseInitTypeDef TIM7_TimeBase;

  RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM7, ENABLE);
 8001086:	2101      	movs	r1, #1
 8001088:	2020      	movs	r0, #32
 800108a:	f7ff fccd 	bl	8000a28 <RCC_APB1PeriphClockCmd>

  TIM_TimeBaseStructInit(&TIM7_TimeBase);
 800108e:	f107 030c 	add.w	r3, r7, #12
 8001092:	4618      	mov	r0, r3
 8001094:	f7ff fd38 	bl	8000b08 <TIM_TimeBaseStructInit>
  TIM7_TimeBase.TIM_Period        = timer_period;
 8001098:	88fb      	ldrh	r3, [r7, #6]
 800109a:	613b      	str	r3, [r7, #16]
  TIM7_TimeBase.TIM_Prescaler     = 0;
 800109c:	2300      	movs	r3, #0
 800109e:	81bb      	strh	r3, [r7, #12]
  TIM7_TimeBase.TIM_ClockDivision = 0;
 80010a0:	2300      	movs	r3, #0
 80010a2:	82bb      	strh	r3, [r7, #20]
  TIM7_TimeBase.TIM_CounterMode   = TIM_CounterMode_Up;
 80010a4:	2300      	movs	r3, #0
 80010a6:	81fb      	strh	r3, [r7, #14]

  TIM_TimeBaseInit(TIM7, &TIM7_TimeBase);
 80010a8:	f107 030c 	add.w	r3, r7, #12
 80010ac:	4619      	mov	r1, r3
 80010ae:	4805      	ldr	r0, [pc, #20]	; (80010c4 <TIM7_Config+0x48>)
 80010b0:	f7ff fcd8 	bl	8000a64 <TIM_TimeBaseInit>
  TIM_SelectOutputTrigger(TIM7, TIM_TRGOSource_Update);
 80010b4:	2120      	movs	r1, #32
 80010b6:	4803      	ldr	r0, [pc, #12]	; (80010c4 <TIM7_Config+0x48>)
 80010b8:	f7ff fd5c 	bl	8000b74 <TIM_SelectOutputTrigger>

}
 80010bc:	bf00      	nop
 80010be:	3718      	adds	r7, #24
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	40001400 	.word	0x40001400

080010c8 <DAC1_Config>:

void DAC1_Config(uint16_t *waveform)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b092      	sub	sp, #72	; 0x48
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  DAC_InitTypeDef DAC_INIT;
  DMA_InitTypeDef DMA_INIT;

  DAC_INIT.DAC_Trigger        = DAC_Trigger_T6_TRGO;
 80010d0:	2304      	movs	r3, #4
 80010d2:	63bb      	str	r3, [r7, #56]	; 0x38
  DAC_INIT.DAC_WaveGeneration = DAC_WaveGeneration_None;
 80010d4:	2300      	movs	r3, #0
 80010d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  DAC_INIT.DAC_OutputBuffer   = DAC_OutputBuffer_Enable;
 80010d8:	2300      	movs	r3, #0
 80010da:	647b      	str	r3, [r7, #68]	; 0x44
  DAC_Init(DAC_Channel_1, &DAC_INIT);
 80010dc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80010e0:	4619      	mov	r1, r3
 80010e2:	2000      	movs	r0, #0
 80010e4:	f7ff f8bc 	bl	8000260 <DAC_Init>

  DMA_DeInit(DMA1_Channel2);
 80010e8:	4817      	ldr	r0, [pc, #92]	; (8001148 <DAC1_Config+0x80>)
 80010ea:	f7ff f935 	bl	8000358 <DMA_DeInit>
  DMA_INIT.DMA_PeripheralBaseAddr = (uint32_t)&DAC->DHR12R1;
 80010ee:	4b17      	ldr	r3, [pc, #92]	; (800114c <DAC1_Config+0x84>)
 80010f0:	60fb      	str	r3, [r7, #12]
  DMA_INIT.DMA_MemoryBaseAddr    = (uint32_t)waveform;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	613b      	str	r3, [r7, #16]
  DMA_INIT.DMA_DIR                = DMA_DIR_PeripheralDST;
 80010f6:	2310      	movs	r3, #16
 80010f8:	617b      	str	r3, [r7, #20]
  DMA_INIT.DMA_BufferSize         = WAVEFORM_RES;
 80010fa:	2380      	movs	r3, #128	; 0x80
 80010fc:	61bb      	str	r3, [r7, #24]
  DMA_INIT.DMA_PeripheralInc      = DMA_PeripheralInc_Disable;
 80010fe:	2300      	movs	r3, #0
 8001100:	61fb      	str	r3, [r7, #28]
  DMA_INIT.DMA_MemoryInc          = DMA_MemoryInc_Enable;
 8001102:	2380      	movs	r3, #128	; 0x80
 8001104:	623b      	str	r3, [r7, #32]
  DMA_INIT.DMA_PeripheralDataSize = DMA_PeripheralDataSize_HalfWord;
 8001106:	f44f 7380 	mov.w	r3, #256	; 0x100
 800110a:	627b      	str	r3, [r7, #36]	; 0x24
  DMA_INIT.DMA_MemoryDataSize     = DMA_MemoryDataSize_HalfWord;
 800110c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001110:	62bb      	str	r3, [r7, #40]	; 0x28
  DMA_INIT.DMA_Mode               = DMA_Mode_Circular;
 8001112:	2320      	movs	r3, #32
 8001114:	62fb      	str	r3, [r7, #44]	; 0x2c
  DMA_INIT.DMA_Priority           = DMA_Priority_High;
 8001116:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800111a:	633b      	str	r3, [r7, #48]	; 0x30

  DMA_Init(DMA1_Channel2, &DMA_INIT);
 800111c:	f107 030c 	add.w	r3, r7, #12
 8001120:	4619      	mov	r1, r3
 8001122:	4809      	ldr	r0, [pc, #36]	; (8001148 <DAC1_Config+0x80>)
 8001124:	f7ff f9d4 	bl	80004d0 <DMA_Init>

  DMA_Cmd(DMA1_Channel2, ENABLE);
 8001128:	2101      	movs	r1, #1
 800112a:	4807      	ldr	r0, [pc, #28]	; (8001148 <DAC1_Config+0x80>)
 800112c:	f7ff fa0e 	bl	800054c <DMA_Cmd>
  DAC_Cmd(DAC_Channel_1, ENABLE);
 8001130:	2101      	movs	r1, #1
 8001132:	2000      	movs	r0, #0
 8001134:	f7ff f8c6 	bl	80002c4 <DAC_Cmd>
  DAC_DMACmd(DAC_Channel_1, ENABLE);
 8001138:	2101      	movs	r1, #1
 800113a:	2000      	movs	r0, #0
 800113c:	f7ff f8e6 	bl	800030c <DAC_DMACmd>
}
 8001140:	bf00      	nop
 8001142:	3748      	adds	r7, #72	; 0x48
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	4002601c 	.word	0x4002601c
 800114c:	40007408 	.word	0x40007408

08001150 <DAC2_Config>:

void DAC2_Config(uint16_t *waveform)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b092      	sub	sp, #72	; 0x48
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  DAC_InitTypeDef DAC_INIT;
  DMA_InitTypeDef DMA_INIT;

  DAC_INIT.DAC_Trigger        = DAC_Trigger_T7_TRGO;
 8001158:	2314      	movs	r3, #20
 800115a:	63bb      	str	r3, [r7, #56]	; 0x38
  DAC_INIT.DAC_WaveGeneration = DAC_WaveGeneration_None;
 800115c:	2300      	movs	r3, #0
 800115e:	63fb      	str	r3, [r7, #60]	; 0x3c
  DAC_INIT.DAC_OutputBuffer   = DAC_OutputBuffer_Enable;
 8001160:	2300      	movs	r3, #0
 8001162:	647b      	str	r3, [r7, #68]	; 0x44
  DAC_Init(DAC_Channel_2, &DAC_INIT);
 8001164:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001168:	4619      	mov	r1, r3
 800116a:	2010      	movs	r0, #16
 800116c:	f7ff f878 	bl	8000260 <DAC_Init>

  DMA_DeInit(DMA1_Channel3);
 8001170:	4817      	ldr	r0, [pc, #92]	; (80011d0 <DAC2_Config+0x80>)
 8001172:	f7ff f8f1 	bl	8000358 <DMA_DeInit>
  DMA_INIT.DMA_PeripheralBaseAddr = (uint32_t)&DAC->DHR12R2;
 8001176:	4b17      	ldr	r3, [pc, #92]	; (80011d4 <DAC2_Config+0x84>)
 8001178:	60fb      	str	r3, [r7, #12]
  DMA_INIT.DMA_MemoryBaseAddr    = (uint32_t)waveform;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	613b      	str	r3, [r7, #16]
  DMA_INIT.DMA_DIR                = DMA_DIR_PeripheralDST;
 800117e:	2310      	movs	r3, #16
 8001180:	617b      	str	r3, [r7, #20]
  DMA_INIT.DMA_BufferSize         = WAVEFORM_RES;
 8001182:	2380      	movs	r3, #128	; 0x80
 8001184:	61bb      	str	r3, [r7, #24]
  DMA_INIT.DMA_PeripheralInc      = DMA_PeripheralInc_Disable;
 8001186:	2300      	movs	r3, #0
 8001188:	61fb      	str	r3, [r7, #28]
  DMA_INIT.DMA_MemoryInc          = DMA_MemoryInc_Enable;
 800118a:	2380      	movs	r3, #128	; 0x80
 800118c:	623b      	str	r3, [r7, #32]
  DMA_INIT.DMA_PeripheralDataSize = DMA_PeripheralDataSize_HalfWord;
 800118e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001192:	627b      	str	r3, [r7, #36]	; 0x24
  DMA_INIT.DMA_MemoryDataSize     = DMA_MemoryDataSize_HalfWord;
 8001194:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001198:	62bb      	str	r3, [r7, #40]	; 0x28
  DMA_INIT.DMA_Mode               = DMA_Mode_Circular;
 800119a:	2320      	movs	r3, #32
 800119c:	62fb      	str	r3, [r7, #44]	; 0x2c
  DMA_INIT.DMA_Priority           = DMA_Priority_High;
 800119e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011a2:	633b      	str	r3, [r7, #48]	; 0x30

  DMA_Init(DMA1_Channel3, &DMA_INIT);
 80011a4:	f107 030c 	add.w	r3, r7, #12
 80011a8:	4619      	mov	r1, r3
 80011aa:	4809      	ldr	r0, [pc, #36]	; (80011d0 <DAC2_Config+0x80>)
 80011ac:	f7ff f990 	bl	80004d0 <DMA_Init>

  DMA_Cmd(DMA1_Channel3, ENABLE);
 80011b0:	2101      	movs	r1, #1
 80011b2:	4807      	ldr	r0, [pc, #28]	; (80011d0 <DAC2_Config+0x80>)
 80011b4:	f7ff f9ca 	bl	800054c <DMA_Cmd>
  DAC_Cmd(DAC_Channel_2, ENABLE);
 80011b8:	2101      	movs	r1, #1
 80011ba:	2010      	movs	r0, #16
 80011bc:	f7ff f882 	bl	80002c4 <DAC_Cmd>
  DAC_DMACmd(DAC_Channel_2, ENABLE);
 80011c0:	2101      	movs	r1, #1
 80011c2:	2010      	movs	r0, #16
 80011c4:	f7ff f8a2 	bl	800030c <DAC_DMACmd>
}
 80011c8:	bf00      	nop
 80011ca:	3748      	adds	r7, #72	; 0x48
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	40026030 	.word	0x40026030
 80011d4:	40007414 	.word	0x40007414

080011d8 <USART2_Config>:

void USART2_Config(void) {
 80011d8:	b580      	push	{r7, lr}
 80011da:	b08c      	sub	sp, #48	; 0x30
 80011dc:	af00      	add	r7, sp, #0
	/* USART2 Config*/
	USART_InitStructure.USART_BaudRate = USART_BAUD;
 80011de:	4b26      	ldr	r3, [pc, #152]	; (8001278 <USART2_Config+0xa0>)
 80011e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011e4:	601a      	str	r2, [r3, #0]
	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
 80011e6:	4b24      	ldr	r3, [pc, #144]	; (8001278 <USART2_Config+0xa0>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	809a      	strh	r2, [r3, #4]
	USART_InitStructure.USART_StopBits = USART_StopBits_1;
 80011ec:	4b22      	ldr	r3, [pc, #136]	; (8001278 <USART2_Config+0xa0>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	80da      	strh	r2, [r3, #6]
	USART_InitStructure.USART_Parity = USART_Parity_No;
 80011f2:	4b21      	ldr	r3, [pc, #132]	; (8001278 <USART2_Config+0xa0>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	811a      	strh	r2, [r3, #8]
	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 80011f8:	4b1f      	ldr	r3, [pc, #124]	; (8001278 <USART2_Config+0xa0>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	819a      	strh	r2, [r3, #12]
	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 80011fe:	4b1e      	ldr	r3, [pc, #120]	; (8001278 <USART2_Config+0xa0>)
 8001200:	220c      	movs	r2, #12
 8001202:	815a      	strh	r2, [r3, #10]
	USART_Init(USART2, &USART_InitStructure);
 8001204:	491c      	ldr	r1, [pc, #112]	; (8001278 <USART2_Config+0xa0>)
 8001206:	481d      	ldr	r0, [pc, #116]	; (800127c <USART2_Config+0xa4>)
 8001208:	f7ff fcd0 	bl	8000bac <USART_Init>

	USART_Cmd(USART2, ENABLE);
 800120c:	2101      	movs	r1, #1
 800120e:	481b      	ldr	r0, [pc, #108]	; (800127c <USART2_Config+0xa4>)
 8001210:	f7ff fd80 	bl	8000d14 <USART_Cmd>

	/*DMA Config*/
	DMA_InitTypeDef  DMA_InitStructure;

	DMA_DeInit(DMA1_Channel6);
 8001214:	481a      	ldr	r0, [pc, #104]	; (8001280 <USART2_Config+0xa8>)
 8001216:	f7ff f89f 	bl	8000358 <DMA_DeInit>

	DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralSRC; // Receive
 800121a:	2300      	movs	r3, #0
 800121c:	60fb      	str	r3, [r7, #12]
	DMA_InitStructure.DMA_MemoryBaseAddr = (uint32_t)uart_dma_buffer;
 800121e:	4b19      	ldr	r3, [pc, #100]	; (8001284 <USART2_Config+0xac>)
 8001220:	60bb      	str	r3, [r7, #8]
	DMA_InitStructure.DMA_BufferSize = (uint16_t)sizeof(uart_dma_buffer);
 8001222:	2319      	movs	r3, #25
 8001224:	613b      	str	r3, [r7, #16]
	DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)&USART2->DR;
 8001226:	4b18      	ldr	r3, [pc, #96]	; (8001288 <USART2_Config+0xb0>)
 8001228:	607b      	str	r3, [r7, #4]
	DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 800122a:	2300      	movs	r3, #0
 800122c:	617b      	str	r3, [r7, #20]
	DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
 800122e:	2380      	movs	r3, #128	; 0x80
 8001230:	61bb      	str	r3, [r7, #24]
	DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
 8001232:	2300      	movs	r3, #0
 8001234:	61fb      	str	r3, [r7, #28]
	DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
 8001236:	2300      	movs	r3, #0
 8001238:	623b      	str	r3, [r7, #32]
	DMA_InitStructure.DMA_Mode = DMA_Mode_Circular;
 800123a:	2320      	movs	r3, #32
 800123c:	627b      	str	r3, [r7, #36]	; 0x24
	DMA_InitStructure.DMA_Priority = DMA_Priority_High;
 800123e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001242:	62bb      	str	r3, [r7, #40]	; 0x28
	DMA_InitStructure.DMA_M2M = DMA_M2M_Disable;
 8001244:	2300      	movs	r3, #0
 8001246:	62fb      	str	r3, [r7, #44]	; 0x2c

	DMA_Init(DMA1_Channel6, &DMA_InitStructure);
 8001248:	1d3b      	adds	r3, r7, #4
 800124a:	4619      	mov	r1, r3
 800124c:	480c      	ldr	r0, [pc, #48]	; (8001280 <USART2_Config+0xa8>)
 800124e:	f7ff f93f 	bl	80004d0 <DMA_Init>

	/* Enable the USART Rx DMA request */
	USART_DMACmd(USART2, USART_DMAReq_Rx, ENABLE);
 8001252:	2201      	movs	r2, #1
 8001254:	2140      	movs	r1, #64	; 0x40
 8001256:	4809      	ldr	r0, [pc, #36]	; (800127c <USART2_Config+0xa4>)
 8001258:	f7ff fd7c 	bl	8000d54 <USART_DMACmd>

	/* Enable DMA Stream Transfer Complete interrupt */
	DMA_ITConfig(DMA1_Channel6, DMA_IT_TC, ENABLE);
 800125c:	2201      	movs	r2, #1
 800125e:	2102      	movs	r1, #2
 8001260:	4807      	ldr	r0, [pc, #28]	; (8001280 <USART2_Config+0xa8>)
 8001262:	f7ff f98f 	bl	8000584 <DMA_ITConfig>

	/* Enable the DMA RX Stream */
	DMA_Cmd(DMA1_Channel6, ENABLE);
 8001266:	2101      	movs	r1, #1
 8001268:	4805      	ldr	r0, [pc, #20]	; (8001280 <USART2_Config+0xa8>)
 800126a:	f7ff f96f 	bl	800054c <DMA_Cmd>

}
 800126e:	bf00      	nop
 8001270:	3730      	adds	r7, #48	; 0x30
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	2000018c 	.word	0x2000018c
 800127c:	40004400 	.word	0x40004400
 8001280:	4002606c 	.word	0x4002606c
 8001284:	2000005c 	.word	0x2000005c
 8001288:	40004404 	.word	0x40004404

0800128c <NVIC_Config>:

void NVIC_Config(void) {
 800128c:	b580      	push	{r7, lr}
 800128e:	af00      	add	r7, sp, #0
	/* Configure the Priority Group to 2 bits */
	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_2);
 8001290:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8001294:	f7fe ff72 	bl	800017c <NVIC_PriorityGroupConfig>

	/* Enable the USART2 RX DMA Interrupt, per RM0038 */
	NVIC_InitStructure.NVIC_IRQChannel = DMA1_Channel6_IRQn;
 8001298:	4b08      	ldr	r3, [pc, #32]	; (80012bc <NVIC_Config+0x30>)
 800129a:	2210      	movs	r2, #16
 800129c:	701a      	strb	r2, [r3, #0]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 800129e:	4b07      	ldr	r3, [pc, #28]	; (80012bc <NVIC_Config+0x30>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	705a      	strb	r2, [r3, #1]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 80012a4:	4b05      	ldr	r3, [pc, #20]	; (80012bc <NVIC_Config+0x30>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	709a      	strb	r2, [r3, #2]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 80012aa:	4b04      	ldr	r3, [pc, #16]	; (80012bc <NVIC_Config+0x30>)
 80012ac:	2201      	movs	r2, #1
 80012ae:	70da      	strb	r2, [r3, #3]
	NVIC_Init(&NVIC_InitStructure);
 80012b0:	4802      	ldr	r0, [pc, #8]	; (80012bc <NVIC_Config+0x30>)
 80012b2:	f7fe ff75 	bl	80001a0 <NVIC_Init>
}
 80012b6:	bf00      	nop
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	200002a0 	.word	0x200002a0

080012c0 <basic_init>:

void basic_init(void) {
 80012c0:	b580      	push	{r7, lr}
 80012c2:	af00      	add	r7, sp, #0

	/* System clocks GPIOA - GPIOC - DAC - DMA1 - USART2 -> respectively */
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
 80012c4:	2101      	movs	r1, #1
 80012c6:	2001      	movs	r0, #1
 80012c8:	f7ff fb90 	bl	80009ec <RCC_AHBPeriphClockCmd>
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOC,ENABLE);
 80012cc:	2101      	movs	r1, #1
 80012ce:	2004      	movs	r0, #4
 80012d0:	f7ff fb8c 	bl	80009ec <RCC_AHBPeriphClockCmd>
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_DAC, ENABLE);
 80012d4:	2101      	movs	r1, #1
 80012d6:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 80012da:	f7ff fba5 	bl	8000a28 <RCC_APB1PeriphClockCmd>
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_DMA1, ENABLE);
 80012de:	2101      	movs	r1, #1
 80012e0:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 80012e4:	f7ff fb82 	bl	80009ec <RCC_AHBPeriphClockCmd>
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
 80012e8:	2101      	movs	r1, #1
 80012ea:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80012ee:	f7ff fb9b 	bl	8000a28 <RCC_APB1PeriphClockCmd>

	/* GPIO for DAC*/
	gpio_a.GPIO_Pin  = GPIO_Pin_4 | GPIO_Pin_5;
 80012f2:	4b23      	ldr	r3, [pc, #140]	; (8001380 <basic_init+0xc0>)
 80012f4:	2230      	movs	r2, #48	; 0x30
 80012f6:	601a      	str	r2, [r3, #0]
	gpio_a.GPIO_Mode = GPIO_Mode_AN;
 80012f8:	4b21      	ldr	r3, [pc, #132]	; (8001380 <basic_init+0xc0>)
 80012fa:	2203      	movs	r2, #3
 80012fc:	711a      	strb	r2, [r3, #4]
	gpio_a.GPIO_PuPd = GPIO_PuPd_NOPULL;
 80012fe:	4b20      	ldr	r3, [pc, #128]	; (8001380 <basic_init+0xc0>)
 8001300:	2200      	movs	r2, #0
 8001302:	71da      	strb	r2, [r3, #7]
	GPIO_Init(GPIOA, &gpio_a);
 8001304:	491e      	ldr	r1, [pc, #120]	; (8001380 <basic_init+0xc0>)
 8001306:	481f      	ldr	r0, [pc, #124]	; (8001384 <basic_init+0xc4>)
 8001308:	f7ff f99c 	bl	8000644 <GPIO_Init>

	/*GPIO for USART*/
	gpio_a.GPIO_Pin = GPIO_Pin_2 | GPIO_Pin_3; // PA.2 USART2_TX, PA.3 USART2_RX
 800130c:	4b1c      	ldr	r3, [pc, #112]	; (8001380 <basic_init+0xc0>)
 800130e:	220c      	movs	r2, #12
 8001310:	601a      	str	r2, [r3, #0]
	gpio_a.GPIO_Mode = GPIO_Mode_AF;
 8001312:	4b1b      	ldr	r3, [pc, #108]	; (8001380 <basic_init+0xc0>)
 8001314:	2202      	movs	r2, #2
 8001316:	711a      	strb	r2, [r3, #4]
	gpio_a.GPIO_OType = GPIO_OType_PP;
 8001318:	4b19      	ldr	r3, [pc, #100]	; (8001380 <basic_init+0xc0>)
 800131a:	2200      	movs	r2, #0
 800131c:	719a      	strb	r2, [r3, #6]
	gpio_a.GPIO_PuPd = GPIO_PuPd_NOPULL;
 800131e:	4b18      	ldr	r3, [pc, #96]	; (8001380 <basic_init+0xc0>)
 8001320:	2200      	movs	r2, #0
 8001322:	71da      	strb	r2, [r3, #7]
	gpio_a.GPIO_Speed = GPIO_Speed_2MHz;
 8001324:	4b16      	ldr	r3, [pc, #88]	; (8001380 <basic_init+0xc0>)
 8001326:	2201      	movs	r2, #1
 8001328:	715a      	strb	r2, [r3, #5]
	GPIO_Init(GPIOA, &gpio_a);
 800132a:	4915      	ldr	r1, [pc, #84]	; (8001380 <basic_init+0xc0>)
 800132c:	4815      	ldr	r0, [pc, #84]	; (8001384 <basic_init+0xc4>)
 800132e:	f7ff f989 	bl	8000644 <GPIO_Init>

	/* GPIO for Button */
	gpio_c.GPIO_Mode = GPIO_Mode_IN;
 8001332:	4b15      	ldr	r3, [pc, #84]	; (8001388 <basic_init+0xc8>)
 8001334:	2200      	movs	r2, #0
 8001336:	711a      	strb	r2, [r3, #4]
	gpio_c.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8001338:	4b13      	ldr	r3, [pc, #76]	; (8001388 <basic_init+0xc8>)
 800133a:	2200      	movs	r2, #0
 800133c:	71da      	strb	r2, [r3, #7]
	gpio_c.GPIO_Pin = GPIO_Pin_13;
 800133e:	4b12      	ldr	r3, [pc, #72]	; (8001388 <basic_init+0xc8>)
 8001340:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001344:	601a      	str	r2, [r3, #0]

	GPIO_Init(GPIOC,&gpio_c);
 8001346:	4910      	ldr	r1, [pc, #64]	; (8001388 <basic_init+0xc8>)
 8001348:	4810      	ldr	r0, [pc, #64]	; (800138c <basic_init+0xcc>)
 800134a:	f7ff f97b 	bl	8000644 <GPIO_Init>

	/* Connect USART pins to AF */
	GPIO_PinAFConfig(GPIOA, GPIO_PinSource2, GPIO_AF_USART2);
 800134e:	2207      	movs	r2, #7
 8001350:	2102      	movs	r1, #2
 8001352:	480c      	ldr	r0, [pc, #48]	; (8001384 <basic_init+0xc4>)
 8001354:	f7ff fa28 	bl	80007a8 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOA, GPIO_PinSource3, GPIO_AF_USART2);
 8001358:	2207      	movs	r2, #7
 800135a:	2103      	movs	r1, #3
 800135c:	4809      	ldr	r0, [pc, #36]	; (8001384 <basic_init+0xc4>)
 800135e:	f7ff fa23 	bl	80007a8 <GPIO_PinAFConfig>

	/* SysTick Config - interrupt every 10 us*/
	ticks = 0;
 8001362:	4b0b      	ldr	r3, [pc, #44]	; (8001390 <basic_init+0xd0>)
 8001364:	2200      	movs	r2, #0
 8001366:	601a      	str	r2, [r3, #0]
	SysTick_Config(SystemCoreClock/1000);
 8001368:	4b0a      	ldr	r3, [pc, #40]	; (8001394 <basic_init+0xd4>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4a0a      	ldr	r2, [pc, #40]	; (8001398 <basic_init+0xd8>)
 800136e:	fba2 2303 	umull	r2, r3, r2, r3
 8001372:	099b      	lsrs	r3, r3, #6
 8001374:	4618      	mov	r0, r3
 8001376:	f7ff fe39 	bl	8000fec <SysTick_Config>
}
 800137a:	bf00      	nop
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	2000004c 	.word	0x2000004c
 8001384:	40020000 	.word	0x40020000
 8001388:	20000178 	.word	0x20000178
 800138c:	40020800 	.word	0x40020800
 8001390:	2000019c 	.word	0x2000019c
 8001394:	2000001c 	.word	0x2000001c
 8001398:	10624dd3 	.word	0x10624dd3

0800139c <osc_start>:

void osc_start(void) {
 800139c:	b580      	push	{r7, lr}
 800139e:	af00      	add	r7, sp, #0
	TIM_Cmd(TIM6, ENABLE);
 80013a0:	2101      	movs	r1, #1
 80013a2:	4804      	ldr	r0, [pc, #16]	; (80013b4 <osc_start+0x18>)
 80013a4:	f7ff fbc6 	bl	8000b34 <TIM_Cmd>
	TIM_Cmd(TIM7, ENABLE);
 80013a8:	2101      	movs	r1, #1
 80013aa:	4803      	ldr	r0, [pc, #12]	; (80013b8 <osc_start+0x1c>)
 80013ac:	f7ff fbc2 	bl	8000b34 <TIM_Cmd>
}
 80013b0:	bf00      	nop
 80013b2:	bd80      	pop	{r7, pc}
 80013b4:	40001000 	.word	0x40001000
 80013b8:	40001400 	.word	0x40001400

080013bc <osc_stop>:

void osc_stop(void) {
 80013bc:	b580      	push	{r7, lr}
 80013be:	af00      	add	r7, sp, #0
	TIM_Cmd(TIM6, DISABLE);
 80013c0:	2100      	movs	r1, #0
 80013c2:	4804      	ldr	r0, [pc, #16]	; (80013d4 <osc_stop+0x18>)
 80013c4:	f7ff fbb6 	bl	8000b34 <TIM_Cmd>
	TIM_Cmd(TIM7, DISABLE);
 80013c8:	2100      	movs	r1, #0
 80013ca:	4803      	ldr	r0, [pc, #12]	; (80013d8 <osc_stop+0x1c>)
 80013cc:	f7ff fbb2 	bl	8000b34 <TIM_Cmd>
}
 80013d0:	bf00      	nop
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	40001000 	.word	0x40001000
 80013d8:	40001400 	.word	0x40001400

080013dc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80013dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001414 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80013e0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80013e2:	e003      	b.n	80013ec <LoopCopyDataInit>

080013e4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80013e4:	4b0c      	ldr	r3, [pc, #48]	; (8001418 <LoopFillZerobss+0x18>)
  ldr r3, [r3, r1]
 80013e6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80013e8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80013ea:	3104      	adds	r1, #4

080013ec <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80013ec:	480b      	ldr	r0, [pc, #44]	; (800141c <LoopFillZerobss+0x1c>)
  ldr r3, =_edata
 80013ee:	4b0c      	ldr	r3, [pc, #48]	; (8001420 <LoopFillZerobss+0x20>)
  adds r2, r0, r1
 80013f0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80013f2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80013f4:	d3f6      	bcc.n	80013e4 <CopyDataInit>
  ldr r2, =_sbss
 80013f6:	4a0b      	ldr	r2, [pc, #44]	; (8001424 <LoopFillZerobss+0x24>)
  b LoopFillZerobss
 80013f8:	e002      	b.n	8001400 <LoopFillZerobss>

080013fa <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80013fa:	2300      	movs	r3, #0
  str r3, [r2], #4
 80013fc:	f842 3b04 	str.w	r3, [r2], #4

08001400 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001400:	4b09      	ldr	r3, [pc, #36]	; (8001428 <LoopFillZerobss+0x28>)
  cmp r2, r3
 8001402:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001404:	d3f9      	bcc.n	80013fa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001406:	f000 f8e3 	bl	80015d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800140a:	f000 f9a3 	bl	8001754 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800140e:	f7ff fd75 	bl	8000efc <main>
  bx lr
 8001412:	4770      	bx	lr

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001414:	20014000 	.word	0x20014000
/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
  b LoopCopyDataInit

CopyDataInit:
  ldr r3, =_sidata
 8001418:	08001ad8 	.word	0x08001ad8
  ldr r3, [r3, r1]
  str r3, [r0, r1]
  adds r1, r1, #4

LoopCopyDataInit:
  ldr r0, =_sdata
 800141c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001420:	20000020 	.word	0x20000020
  adds r2, r0, r1
  cmp r2, r3
  bcc CopyDataInit
  ldr r2, =_sbss
 8001424:	20000020 	.word	0x20000020
FillZerobss:
  movs r3, #0
  str r3, [r2], #4

LoopFillZerobss:
  ldr r3, = _ebss
 8001428:	200002ac 	.word	0x200002ac

0800142c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800142c:	e7fe      	b.n	800142c <ADC1_IRQHandler>
	...

08001430 <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0
}
 8001434:	bf00      	nop
 8001436:	46bd      	mov	sp, r7
 8001438:	bc80      	pop	{r7}
 800143a:	4770      	bx	lr

0800143c <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 800143c:	b480      	push	{r7}
 800143e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
  {
  }
 8001440:	e7fe      	b.n	8001440 <HardFault_Handler+0x4>
 8001442:	bf00      	nop

08001444 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
  {
  }
 8001448:	e7fe      	b.n	8001448 <MemManage_Handler+0x4>
 800144a:	bf00      	nop

0800144c <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 800144c:	b480      	push	{r7}
 800144e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
  {
  }
 8001450:	e7fe      	b.n	8001450 <BusFault_Handler+0x4>
 8001452:	bf00      	nop

08001454 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
  {
  }
 8001458:	e7fe      	b.n	8001458 <UsageFault_Handler+0x4>
 800145a:	bf00      	nop

0800145c <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0
}
 8001460:	bf00      	nop
 8001462:	46bd      	mov	sp, r7
 8001464:	bc80      	pop	{r7}
 8001466:	4770      	bx	lr

08001468 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8001468:	b480      	push	{r7}
 800146a:	af00      	add	r7, sp, #0
}
 800146c:	bf00      	nop
 800146e:	46bd      	mov	sp, r7
 8001470:	bc80      	pop	{r7}
 8001472:	4770      	bx	lr

08001474 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8001474:	b480      	push	{r7}
 8001476:	af00      	add	r7, sp, #0
}
 8001478:	bf00      	nop
 800147a:	46bd      	mov	sp, r7
 800147c:	bc80      	pop	{r7}
 800147e:	4770      	bx	lr

08001480 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b0c0      	sub	sp, #256	; 0x100
 8001484:	af00      	add	r7, sp, #0
	static int turn_on_flag;
	static uint8_t counter;
	uint16_t help_array[WAVEFORM_RES];
	ticks++;
 8001486:	4b12      	ldr	r3, [pc, #72]	; (80014d0 <SysTick_Handler+0x50>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	3301      	adds	r3, #1
 800148c:	4a10      	ldr	r2, [pc, #64]	; (80014d0 <SysTick_Handler+0x50>)
 800148e:	6013      	str	r3, [r2, #0]
		TIM6_Config(calc_timer_period(OSC1_Freq + LFO_sine_function[ticks]));
		counter++;
	}
	*/

	if (make_sound == 1) {
 8001490:	4b10      	ldr	r3, [pc, #64]	; (80014d4 <SysTick_Handler+0x54>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	2b01      	cmp	r3, #1
 8001496:	d10d      	bne.n	80014b4 <SysTick_Handler+0x34>
		if (turn_on_flag == 0) {
 8001498:	4b0f      	ldr	r3, [pc, #60]	; (80014d8 <SysTick_Handler+0x58>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	2b00      	cmp	r3, #0
 800149e:	d109      	bne.n	80014b4 <SysTick_Handler+0x34>
			turn_on_flag = 1;
 80014a0:	4b0d      	ldr	r3, [pc, #52]	; (80014d8 <SysTick_Handler+0x58>)
 80014a2:	2201      	movs	r2, #1
 80014a4:	601a      	str	r2, [r3, #0]
			osc_start();
 80014a6:	f7ff ff79 	bl	800139c <osc_start>
			counter = ticks;
 80014aa:	4b09      	ldr	r3, [pc, #36]	; (80014d0 <SysTick_Handler+0x50>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	b2da      	uxtb	r2, r3
 80014b0:	4b0a      	ldr	r3, [pc, #40]	; (80014dc <SysTick_Handler+0x5c>)
 80014b2:	701a      	strb	r2, [r3, #0]
			memcpy(&current_waveform,&help_array,sizeof(uint16_t)*WAVEFORM_RES);
		}
		*/
	}

	if (make_sound == 0) {
 80014b4:	4b07      	ldr	r3, [pc, #28]	; (80014d4 <SysTick_Handler+0x54>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d104      	bne.n	80014c6 <SysTick_Handler+0x46>
		turn_on_flag = 0;
 80014bc:	4b06      	ldr	r3, [pc, #24]	; (80014d8 <SysTick_Handler+0x58>)
 80014be:	2200      	movs	r2, #0
 80014c0:	601a      	str	r2, [r3, #0]
		osc_stop();
 80014c2:	f7ff ff7b 	bl	80013bc <osc_stop>

	/*  TimingDelay_Decrement(); */
//#ifdef USE_STM32L_DISCOVERY
//  TimingDelay_Decrement();
//#endif
}
 80014c6:	bf00      	nop
 80014c8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	2000019c 	.word	0x2000019c
 80014d4:	20000188 	.word	0x20000188
 80014d8:	20000040 	.word	0x20000040
 80014dc:	20000044 	.word	0x20000044

080014e0 <set_waveform>:
 */

#include "synth_utility.h"


void set_waveform(WAVEFORMS wave_type, int osc) {
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b082      	sub	sp, #8
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	4603      	mov	r3, r0
 80014e8:	6039      	str	r1, [r7, #0]
 80014ea:	71fb      	strb	r3, [r7, #7]

	if (osc == 1) {
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	2b01      	cmp	r3, #1
 80014f0:	d124      	bne.n	800153c <set_waveform+0x5c>
		switch (wave_type) {
 80014f2:	79fb      	ldrb	r3, [r7, #7]
 80014f4:	2b01      	cmp	r3, #1
 80014f6:	d00d      	beq.n	8001514 <set_waveform+0x34>
 80014f8:	2b02      	cmp	r3, #2
 80014fa:	d015      	beq.n	8001528 <set_waveform+0x48>
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d11d      	bne.n	800153c <set_waveform+0x5c>
			case SINE :
				memcpy(&current_waveform_osc_1,
 8001500:	4a25      	ldr	r2, [pc, #148]	; (8001598 <set_waveform+0xb8>)
 8001502:	4b26      	ldr	r3, [pc, #152]	; (800159c <set_waveform+0xbc>)
 8001504:	4610      	mov	r0, r2
 8001506:	4619      	mov	r1, r3
 8001508:	f44f 7380 	mov.w	r3, #256	; 0x100
 800150c:	461a      	mov	r2, r3
 800150e:	f000 f947 	bl	80017a0 <memcpy>
					   &sine_function,
					   sizeof(uint16_t)*WAVEFORM_RES);
				break;
 8001512:	e013      	b.n	800153c <set_waveform+0x5c>

			case SQUARE :
				memcpy(&current_waveform_osc_1,
 8001514:	4a20      	ldr	r2, [pc, #128]	; (8001598 <set_waveform+0xb8>)
 8001516:	4b22      	ldr	r3, [pc, #136]	; (80015a0 <set_waveform+0xc0>)
 8001518:	4610      	mov	r0, r2
 800151a:	4619      	mov	r1, r3
 800151c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001520:	461a      	mov	r2, r3
 8001522:	f000 f93d 	bl	80017a0 <memcpy>
					   &square_function,
					   sizeof(uint16_t)*WAVEFORM_RES);
				break;
 8001526:	e009      	b.n	800153c <set_waveform+0x5c>

			case SAWTOOTH :
				memcpy(&current_waveform_osc_1,
 8001528:	4a1b      	ldr	r2, [pc, #108]	; (8001598 <set_waveform+0xb8>)
 800152a:	4b1e      	ldr	r3, [pc, #120]	; (80015a4 <set_waveform+0xc4>)
 800152c:	4610      	mov	r0, r2
 800152e:	4619      	mov	r1, r3
 8001530:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001534:	461a      	mov	r2, r3
 8001536:	f000 f933 	bl	80017a0 <memcpy>
					   &sawtooth_function,
					   sizeof(uint16_t)*WAVEFORM_RES);
				break;
 800153a:	bf00      	nop
		}
	}

	if (osc == 2) {
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	2b02      	cmp	r3, #2
 8001540:	d125      	bne.n	800158e <set_waveform+0xae>
			switch (wave_type) {
 8001542:	79fb      	ldrb	r3, [r7, #7]
 8001544:	2b01      	cmp	r3, #1
 8001546:	d00e      	beq.n	8001566 <set_waveform+0x86>
 8001548:	2b02      	cmp	r3, #2
 800154a:	d016      	beq.n	800157a <set_waveform+0x9a>
 800154c:	2b00      	cmp	r3, #0
 800154e:	d000      	beq.n	8001552 <set_waveform+0x72>
						   &sawtooth_function,
						   sizeof(uint16_t)*WAVEFORM_RES);
					break;
			}
		}
}
 8001550:	e01d      	b.n	800158e <set_waveform+0xae>
	}

	if (osc == 2) {
			switch (wave_type) {
				case SINE :
					memcpy(&current_waveform_osc_2,
 8001552:	4a15      	ldr	r2, [pc, #84]	; (80015a8 <set_waveform+0xc8>)
 8001554:	4b11      	ldr	r3, [pc, #68]	; (800159c <set_waveform+0xbc>)
 8001556:	4610      	mov	r0, r2
 8001558:	4619      	mov	r1, r3
 800155a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800155e:	461a      	mov	r2, r3
 8001560:	f000 f91e 	bl	80017a0 <memcpy>
						   &sine_function,
						   sizeof(uint16_t)*WAVEFORM_RES);
					break;
 8001564:	e013      	b.n	800158e <set_waveform+0xae>

				case SQUARE :
					memcpy(&current_waveform_osc_2,
 8001566:	4a10      	ldr	r2, [pc, #64]	; (80015a8 <set_waveform+0xc8>)
 8001568:	4b0d      	ldr	r3, [pc, #52]	; (80015a0 <set_waveform+0xc0>)
 800156a:	4610      	mov	r0, r2
 800156c:	4619      	mov	r1, r3
 800156e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001572:	461a      	mov	r2, r3
 8001574:	f000 f914 	bl	80017a0 <memcpy>
						   &square_function,
						   sizeof(uint16_t)*WAVEFORM_RES);
					break;
 8001578:	e009      	b.n	800158e <set_waveform+0xae>

				case SAWTOOTH :
					memcpy(&current_waveform_osc_2,
 800157a:	4a0b      	ldr	r2, [pc, #44]	; (80015a8 <set_waveform+0xc8>)
 800157c:	4b09      	ldr	r3, [pc, #36]	; (80015a4 <set_waveform+0xc4>)
 800157e:	4610      	mov	r0, r2
 8001580:	4619      	mov	r1, r3
 8001582:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001586:	461a      	mov	r2, r3
 8001588:	f000 f90a 	bl	80017a0 <memcpy>
						   &sawtooth_function,
						   sizeof(uint16_t)*WAVEFORM_RES);
					break;
 800158c:	bf00      	nop
			}
		}
}
 800158e:	bf00      	nop
 8001590:	3708      	adds	r7, #8
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	20000078 	.word	0x20000078
 800159c:	080017d0 	.word	0x080017d0
 80015a0:	080018d0 	.word	0x080018d0
 80015a4:	080019d0 	.word	0x080019d0
 80015a8:	200001a0 	.word	0x200001a0

080015ac <calc_timer_period>:

uint16_t calc_timer_period(uint32_t signal_frequency) {
 80015ac:	b480      	push	{r7}
 80015ae:	b083      	sub	sp, #12
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
	return ((CNT_FREQ)/((WAVEFORM_RES)*(signal_frequency)));
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	01db      	lsls	r3, r3, #7
 80015b8:	4a04      	ldr	r2, [pc, #16]	; (80015cc <calc_timer_period+0x20>)
 80015ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80015be:	b29b      	uxth	r3, r3
}
 80015c0:	4618      	mov	r0, r3
 80015c2:	370c      	adds	r7, #12
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bc80      	pop	{r7}
 80015c8:	4770      	bx	lr
 80015ca:	bf00      	nop
 80015cc:	01e84800 	.word	0x01e84800

080015d0 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	af00      	add	r7, sp, #0
  /*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100;
 80015d4:	4a15      	ldr	r2, [pc, #84]	; (800162c <SystemInit+0x5c>)
 80015d6:	4b15      	ldr	r3, [pc, #84]	; (800162c <SystemInit+0x5c>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015de:	6013      	str	r3, [r2, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t)0x88FFC00C;
 80015e0:	4912      	ldr	r1, [pc, #72]	; (800162c <SystemInit+0x5c>)
 80015e2:	4b12      	ldr	r3, [pc, #72]	; (800162c <SystemInit+0x5c>)
 80015e4:	689a      	ldr	r2, [r3, #8]
 80015e6:	4b12      	ldr	r3, [pc, #72]	; (8001630 <SystemInit+0x60>)
 80015e8:	4013      	ands	r3, r2
 80015ea:	608b      	str	r3, [r1, #8]
  
  /*!< Reset HSION, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xEEFEFFFE;
 80015ec:	4a0f      	ldr	r2, [pc, #60]	; (800162c <SystemInit+0x5c>)
 80015ee:	4b0f      	ldr	r3, [pc, #60]	; (800162c <SystemInit+0x5c>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 80015f6:	f023 1301 	bic.w	r3, r3, #65537	; 0x10001
 80015fa:	6013      	str	r3, [r2, #0]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80015fc:	4a0b      	ldr	r2, [pc, #44]	; (800162c <SystemInit+0x5c>)
 80015fe:	4b0b      	ldr	r3, [pc, #44]	; (800162c <SystemInit+0x5c>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001606:	6013      	str	r3, [r2, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFF;
 8001608:	4a08      	ldr	r2, [pc, #32]	; (800162c <SystemInit+0x5c>)
 800160a:	4b08      	ldr	r3, [pc, #32]	; (800162c <SystemInit+0x5c>)
 800160c:	689b      	ldr	r3, [r3, #8]
 800160e:	f423 037d 	bic.w	r3, r3, #16580608	; 0xfd0000
 8001612:	6093      	str	r3, [r2, #8]

  /*!< Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001614:	4b05      	ldr	r3, [pc, #20]	; (800162c <SystemInit+0x5c>)
 8001616:	2200      	movs	r2, #0
 8001618:	60da      	str	r2, [r3, #12]
#ifdef DATA_IN_ExtSRAM
SystemInit_ExtMemCtl();
#endif /* DATA_IN_ExtSRAM */

  /* Configure the System clock frequency, AHB/APBx prescalers and Flash settings */
  SetSysClock();
 800161a:	f000 f80d 	bl	8001638 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800161e:	4b05      	ldr	r3, [pc, #20]	; (8001634 <SystemInit+0x64>)
 8001620:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001624:	609a      	str	r2, [r3, #8]
#endif
}
 8001626:	bf00      	nop
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	40023800 	.word	0x40023800
 8001630:	88ffc00c 	.word	0x88ffc00c
 8001634:	e000ed00 	.word	0xe000ed00

08001638 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8001638:	b480      	push	{r7}
 800163a:	b083      	sub	sp, #12
 800163c:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSIStatus = 0;
 800163e:	2300      	movs	r3, #0
 8001640:	607b      	str	r3, [r7, #4]
 8001642:	2300      	movs	r3, #0
 8001644:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/
  /* Enable HSI */
  RCC->CR |= ((uint32_t)RCC_CR_HSION);
 8001646:	4a40      	ldr	r2, [pc, #256]	; (8001748 <SetSysClock+0x110>)
 8001648:	4b3f      	ldr	r3, [pc, #252]	; (8001748 <SetSysClock+0x110>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f043 0301 	orr.w	r3, r3, #1
 8001650:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSI is ready and if Time out is reached exit */
  do
  {
    HSIStatus = RCC->CR & RCC_CR_HSIRDY;
 8001652:	4b3d      	ldr	r3, [pc, #244]	; (8001748 <SetSysClock+0x110>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f003 0302 	and.w	r3, r3, #2
 800165a:	603b      	str	r3, [r7, #0]
  } while((HSIStatus == 0) && (StartUpCounter != HSI_STARTUP_TIMEOUT));
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d103      	bne.n	800166a <SetSysClock+0x32>
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8001668:	d1f3      	bne.n	8001652 <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSIRDY) != RESET)
 800166a:	4b37      	ldr	r3, [pc, #220]	; (8001748 <SetSysClock+0x110>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f003 0302 	and.w	r3, r3, #2
 8001672:	2b00      	cmp	r3, #0
 8001674:	d002      	beq.n	800167c <SetSysClock+0x44>
  {
    HSIStatus = (uint32_t)0x01;
 8001676:	2301      	movs	r3, #1
 8001678:	603b      	str	r3, [r7, #0]
 800167a:	e001      	b.n	8001680 <SetSysClock+0x48>
  }
  else
  {
    HSIStatus = (uint32_t)0x00;
 800167c:	2300      	movs	r3, #0
 800167e:	603b      	str	r3, [r7, #0]
  }

  if (HSIStatus == (uint32_t)0x01)
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	2b01      	cmp	r3, #1
 8001684:	d15a      	bne.n	800173c <SetSysClock+0x104>
  {
    /* Enable 64-bit access */
    FLASH->ACR |= FLASH_ACR_ACC64;
 8001686:	4a31      	ldr	r2, [pc, #196]	; (800174c <SetSysClock+0x114>)
 8001688:	4b30      	ldr	r3, [pc, #192]	; (800174c <SetSysClock+0x114>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f043 0304 	orr.w	r3, r3, #4
 8001690:	6013      	str	r3, [r2, #0]
    
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTEN;
 8001692:	4a2e      	ldr	r2, [pc, #184]	; (800174c <SetSysClock+0x114>)
 8001694:	4b2d      	ldr	r3, [pc, #180]	; (800174c <SetSysClock+0x114>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f043 0302 	orr.w	r3, r3, #2
 800169c:	6013      	str	r3, [r2, #0]

    /* Flash 1 wait state */
    FLASH->ACR |= FLASH_ACR_LATENCY;
 800169e:	4a2b      	ldr	r2, [pc, #172]	; (800174c <SetSysClock+0x114>)
 80016a0:	4b2a      	ldr	r3, [pc, #168]	; (800174c <SetSysClock+0x114>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f043 0301 	orr.w	r3, r3, #1
 80016a8:	6013      	str	r3, [r2, #0]
    

    /* Power enable */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 80016aa:	4a27      	ldr	r2, [pc, #156]	; (8001748 <SetSysClock+0x110>)
 80016ac:	4b26      	ldr	r3, [pc, #152]	; (8001748 <SetSysClock+0x110>)
 80016ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016b4:	6253      	str	r3, [r2, #36]	; 0x24
  
    /* Select the Voltage Range 1 (1.8 V) */
    PWR->CR = PWR_CR_VOS_0;
 80016b6:	4b26      	ldr	r3, [pc, #152]	; (8001750 <SetSysClock+0x118>)
 80016b8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80016bc:	601a      	str	r2, [r3, #0]
  

    /* Wait Until the Voltage Regulator is ready */
    while((PWR->CSR & PWR_CSR_VOSF) != RESET)
 80016be:	bf00      	nop
 80016c0:	4b23      	ldr	r3, [pc, #140]	; (8001750 <SetSysClock+0x118>)
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	f003 0310 	and.w	r3, r3, #16
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d1f9      	bne.n	80016c0 <SetSysClock+0x88>
    {
    }

    /* HCLK = SYSCLK /1*/
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 80016cc:	4a1e      	ldr	r2, [pc, #120]	; (8001748 <SetSysClock+0x110>)
 80016ce:	4b1e      	ldr	r3, [pc, #120]	; (8001748 <SetSysClock+0x110>)
 80016d0:	689b      	ldr	r3, [r3, #8]
 80016d2:	6093      	str	r3, [r2, #8]
  
    /* PCLK2 = HCLK /1*/
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 80016d4:	4a1c      	ldr	r2, [pc, #112]	; (8001748 <SetSysClock+0x110>)
 80016d6:	4b1c      	ldr	r3, [pc, #112]	; (8001748 <SetSysClock+0x110>)
 80016d8:	689b      	ldr	r3, [r3, #8]
 80016da:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK /1*/
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV1;
 80016dc:	4a1a      	ldr	r2, [pc, #104]	; (8001748 <SetSysClock+0x110>)
 80016de:	4b1a      	ldr	r3, [pc, #104]	; (8001748 <SetSysClock+0x110>)
 80016e0:	689b      	ldr	r3, [r3, #8]
 80016e2:	6093      	str	r3, [r2, #8]
    
    /*  PLL configuration */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLMUL |
 80016e4:	4a18      	ldr	r2, [pc, #96]	; (8001748 <SetSysClock+0x110>)
 80016e6:	4b18      	ldr	r3, [pc, #96]	; (8001748 <SetSysClock+0x110>)
 80016e8:	689b      	ldr	r3, [r3, #8]
 80016ea:	f423 037d 	bic.w	r3, r3, #16580608	; 0xfd0000
 80016ee:	6093      	str	r3, [r2, #8]
                                        RCC_CFGR_PLLDIV));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSI | RCC_CFGR_PLLMUL4 | RCC_CFGR_PLLDIV2);
 80016f0:	4a15      	ldr	r2, [pc, #84]	; (8001748 <SetSysClock+0x110>)
 80016f2:	4b15      	ldr	r3, [pc, #84]	; (8001748 <SetSysClock+0x110>)
 80016f4:	689b      	ldr	r3, [r3, #8]
 80016f6:	f443 0388 	orr.w	r3, r3, #4456448	; 0x440000
 80016fa:	6093      	str	r3, [r2, #8]

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 80016fc:	4a12      	ldr	r2, [pc, #72]	; (8001748 <SetSysClock+0x110>)
 80016fe:	4b12      	ldr	r3, [pc, #72]	; (8001748 <SetSysClock+0x110>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001706:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8001708:	bf00      	nop
 800170a:	4b0f      	ldr	r3, [pc, #60]	; (8001748 <SetSysClock+0x110>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001712:	2b00      	cmp	r3, #0
 8001714:	d0f9      	beq.n	800170a <SetSysClock+0xd2>
    {
    }
        
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8001716:	4a0c      	ldr	r2, [pc, #48]	; (8001748 <SetSysClock+0x110>)
 8001718:	4b0b      	ldr	r3, [pc, #44]	; (8001748 <SetSysClock+0x110>)
 800171a:	689b      	ldr	r3, [r3, #8]
 800171c:	f023 0303 	bic.w	r3, r3, #3
 8001720:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;
 8001722:	4a09      	ldr	r2, [pc, #36]	; (8001748 <SetSysClock+0x110>)
 8001724:	4b08      	ldr	r3, [pc, #32]	; (8001748 <SetSysClock+0x110>)
 8001726:	689b      	ldr	r3, [r3, #8]
 8001728:	f043 0303 	orr.w	r3, r3, #3
 800172c:	6093      	str	r3, [r2, #8]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)RCC_CFGR_SWS_PLL)
 800172e:	bf00      	nop
 8001730:	4b05      	ldr	r3, [pc, #20]	; (8001748 <SetSysClock+0x110>)
 8001732:	689b      	ldr	r3, [r3, #8]
 8001734:	f003 030c 	and.w	r3, r3, #12
 8001738:	2b0c      	cmp	r3, #12
 800173a:	d1f9      	bne.n	8001730 <SetSysClock+0xf8>
  else
  {
    /* If HSI fails to start-up, the application will have wrong clock
       configuration. User can add here some code to deal with this error */
  }
}
 800173c:	bf00      	nop
 800173e:	370c      	adds	r7, #12
 8001740:	46bd      	mov	sp, r7
 8001742:	bc80      	pop	{r7}
 8001744:	4770      	bx	lr
 8001746:	bf00      	nop
 8001748:	40023800 	.word	0x40023800
 800174c:	40023c00 	.word	0x40023c00
 8001750:	40007000 	.word	0x40007000

08001754 <__libc_init_array>:
 8001754:	4b0e      	ldr	r3, [pc, #56]	; (8001790 <__libc_init_array+0x3c>)
 8001756:	b570      	push	{r4, r5, r6, lr}
 8001758:	461e      	mov	r6, r3
 800175a:	4c0e      	ldr	r4, [pc, #56]	; (8001794 <__libc_init_array+0x40>)
 800175c:	2500      	movs	r5, #0
 800175e:	1ae4      	subs	r4, r4, r3
 8001760:	10a4      	asrs	r4, r4, #2
 8001762:	42a5      	cmp	r5, r4
 8001764:	d004      	beq.n	8001770 <__libc_init_array+0x1c>
 8001766:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800176a:	4798      	blx	r3
 800176c:	3501      	adds	r5, #1
 800176e:	e7f8      	b.n	8001762 <__libc_init_array+0xe>
 8001770:	f000 f822 	bl	80017b8 <_init>
 8001774:	4b08      	ldr	r3, [pc, #32]	; (8001798 <__libc_init_array+0x44>)
 8001776:	4c09      	ldr	r4, [pc, #36]	; (800179c <__libc_init_array+0x48>)
 8001778:	461e      	mov	r6, r3
 800177a:	1ae4      	subs	r4, r4, r3
 800177c:	10a4      	asrs	r4, r4, #2
 800177e:	2500      	movs	r5, #0
 8001780:	42a5      	cmp	r5, r4
 8001782:	d004      	beq.n	800178e <__libc_init_array+0x3a>
 8001784:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001788:	4798      	blx	r3
 800178a:	3501      	adds	r5, #1
 800178c:	e7f8      	b.n	8001780 <__libc_init_array+0x2c>
 800178e:	bd70      	pop	{r4, r5, r6, pc}
 8001790:	08001ad0 	.word	0x08001ad0
 8001794:	08001ad0 	.word	0x08001ad0
 8001798:	08001ad0 	.word	0x08001ad0
 800179c:	08001ad4 	.word	0x08001ad4

080017a0 <memcpy>:
 80017a0:	b510      	push	{r4, lr}
 80017a2:	1e43      	subs	r3, r0, #1
 80017a4:	440a      	add	r2, r1
 80017a6:	4291      	cmp	r1, r2
 80017a8:	d004      	beq.n	80017b4 <memcpy+0x14>
 80017aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80017ae:	f803 4f01 	strb.w	r4, [r3, #1]!
 80017b2:	e7f8      	b.n	80017a6 <memcpy+0x6>
 80017b4:	bd10      	pop	{r4, pc}
	...

080017b8 <_init>:
 80017b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017ba:	bf00      	nop
 80017bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80017be:	bc08      	pop	{r3}
 80017c0:	469e      	mov	lr, r3
 80017c2:	4770      	bx	lr

080017c4 <_fini>:
 80017c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017c6:	bf00      	nop
 80017c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80017ca:	bc08      	pop	{r3}
 80017cc:	469e      	mov	lr, r3
 80017ce:	4770      	bx	lr
